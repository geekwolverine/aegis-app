{"version":3,"file":"829.js","mappings":"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","sources":["webpack://microlib-example/./src/config/inventory.js","webpack://microlib-example/./src/config/order.js","webpack://microlib-example/./src/config/user.js","webpack://microlib-example/./src/domain/bind-adapters.js","webpack://microlib-example/./src/domain/check-payload.js","webpack://microlib-example/./src/domain/index.js","webpack://microlib-example/./src/domain/inventory.js","webpack://microlib-example/./src/domain/mixins.js","webpack://microlib-example/./src/domain/order.js","webpack://microlib-example/./src/domain/user.js","webpack://microlib-example/./src/domain/utils.js","webpack://microlib-example/./src/event-dispatcher.js","webpack://microlib-example/./src/service-registry.js","webpack://microlib-example/./test/mock/address-service.js","webpack://microlib-example/./test/mock/event-service.js","webpack://microlib-example/./test/mock/inventory-service.js","webpack://microlib-example/./test/mock/payment-service.js","webpack://microlib-example/./test/mock/shipping-service.js","webpack://microlib-example/./node_modules/nanoid/index.js","webpack://microlib-example/./node_modules/nanoid/url-alphabet/index.js"],"sourcesContent":["'use strict'\n\nimport { DataSourceAdapterMongoDb } from '../adapters/datasources/datasource-mongodb'\nimport {\n  makeInventoryFactory,\n  assetTypes,\n  properties,\n  categories\n} from '../domain/inventory'\n\nimport {\n  requireProperties,\n  freezeProperties,\n  validateProperties\n} from '../domain/mixins'\n\n/**\n * @type {import(\"../domain/order\").ModelSpecification}\n */\nexport const Inventory = {\n  modelName: 'inventory',\n  endpoint: 'inventory',\n  dependencies: {},\n  factory: makeInventoryFactory,\n  // datasource: {\n  //   factory: DataSourceAdapterMongoDb,\n  //   url: 'mongodb://127.0.0.1:27017',\n  //   cacheSize: 4000,\n  //   baseClass: 'DataSourceMongoDb'\n  // },\n  mixins: [\n    requireProperties('name', 'inStock', 'category', 'price', 'purchaseOrder'),\n    validateProperties([\n      {\n        propKey: 'inStock',\n        typeof: 'number',\n        maxnum: 99999\n      },\n      {\n        propKey: 'category',\n        values: categories\n      },\n      {\n        propKey: 'assetType',\n        values: assetTypes\n      },\n      {\n        propKey: 'properties',\n        isValid: (_obj, prop) => prop.every(p => properties.includes(p))\n      },\n      {\n        propKey: 'price',\n        typeof: 'number',\n        maxnum: 999.99\n      }\n    ]),\n    freezeProperties('*')\n  ],\n  relations: {\n    orders: {\n      modelName: 'order',\n      type: 'oneToMany',\n      foreignKey: 'itemId',\n      desc: 'many items per order'\n    }\n  }\n}\n","'use strict'\n\nimport {\n  makeOrderFactory,\n  readyToDelete,\n  handleOrderEvent,\n  orderShipped,\n  paymentCompleted,\n  OrderStatus,\n  recalcTotal,\n  requiredForCompletion,\n  statusChangeValid,\n  freezeOnApproval,\n  freezeOnCompletion,\n  orderTotalValid,\n  returnInventory,\n  returnShipment,\n  refundPayment,\n  returnDelivery,\n  cancelPayment,\n  updateSignature,\n  requiredForGuest,\n  requiredForApproval,\n  approve,\n  cancel,\n  accountOrder\n} from '../domain/order'\n\nimport {\n  requireProperties,\n  freezeProperties,\n  updateProperties,\n  validateProperties,\n  validateModel\n} from '../domain/mixins'\n\nimport { DataSourceAdapterMongoDb } from '../adapters/datasources/datasource-mongodb'\nimport { nanoid } from 'nanoid'\nimport { DataSourceFileAdapter } from '../adapters/datasources/datasource-file-adapter'\n\n/**\n * @type {import('../domain/index').ModelSpecification}\n */\nexport const Order = {\n  modelName: 'order',\n  endpoint: 'orders',\n  factory: makeOrderFactory,\n  // datasource: {\n  //   factory: DataSourceAdapterMongoDb,\n  //   url: 'mongodb://127.0.0.1:27017',\n  //   cacheSize: 4000,\n  //   baseClass: 'DataSourceMongoDb'\n  // },\n  // datasource: {\n  //   factory: DataSourceFileAdapter,\n  //   cacheSize: 4000,\n  //   baseClass: 'DataSourceFile'\n  // },\n  dependencies: { uuid: () => nanoid(8) },\n  mixins: [\n    requireProperties(\n      'orderItems',\n      requiredForGuest([\n        'lastName',\n        'firstName',\n        'billingAddress',\n        'shippingAddress',\n        'creditCardNumber',\n        'email'\n      ]),\n      requiredForApproval('paymentAuthorization'),\n      requiredForCompletion('proofOfDelivery')\n    ),\n    freezeProperties(\n      'orderNo',\n      'customerId',\n      freezeOnApproval([\n        'email',\n        'lastName',\n        'firstName',\n        'orderItems',\n        'orderTotal',\n        'billingAddress',\n        'shippingAddress',\n        'creditCardNumber',\n        'paymentAuthorization'\n      ]),\n      freezeOnCompletion('*')\n    ),\n    updateProperties([\n      {\n        propKey: 'orderItems',\n        update: recalcTotal\n      },\n      {\n        propKey: 'orderItems',\n        update: updateSignature\n      }\n    ]),\n    validateProperties([\n      {\n        propKey: 'orderStatus',\n        values: Object.values(OrderStatus),\n        isValid: statusChangeValid\n      },\n      {\n        propKey: 'orderTotal',\n        maxnum: 99999.99,\n        isValid: orderTotalValid\n      },\n      {\n        propKey: 'email',\n        regex: 'email'\n      },\n      {\n        propKey: 'creditCardNumber',\n        regex: 'creditCard'\n      },\n      {\n        propKey: 'phone',\n        regex: 'phone'\n      }\n    ])\n  ],\n  validate: validateModel,\n  onDelete: readyToDelete,\n  eventHandlers: [handleOrderEvent],\n  ports: {\n    listen: {\n      service: 'Event',\n      type: 'outbound',\n      timeout: 0\n    },\n    notify: {\n      service: 'Event',\n      type: 'outbound',\n      timeout: 0\n    },\n    save: {\n      service: 'Persistence',\n      type: 'outbound',\n      timeout: 0\n    },\n    find: {\n      service: 'Persistence',\n      type: 'outbound',\n      timeout: 0\n    },\n    validateAddress: {\n      service: 'Address',\n      type: 'outbound',\n      keys: 'shippingAddress',\n      producesEvent: 'addressValidated',\n      disabled: true\n    },\n    authorizePayment: {\n      service: 'Payment',\n      type: 'outbound',\n      keys: 'paymentStatus',\n      consumesEvent: 'startWorkflow',\n      producesEvent: 'paymentAuthorized',\n      undo: cancelPayment,\n      disabled: true\n    },\n    pickOrder: {\n      service: 'Inventory',\n      type: 'outbound',\n      keys: 'pickupAddress',\n      consumesEvent: 'itemsAvailable',\n      producesEvent: 'orderPicked',\n      undo: returnInventory,\n      circuitBreaker: {\n        portTimeout_pickOrder_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 60000\n        }\n      }\n    },\n    shipOrder: {\n      service: 'Shipping',\n      type: 'outbound',\n      callback: orderShipped,\n      consumesEvent: 'orderPicked',\n      producesEvent: 'orderShipped',\n      undo: returnShipment,\n      circuitBreaker: {\n        portTimeout_shipOrder_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 60000\n        },\n        portRetryFailed_order: {\n          callVolume: 3,\n          errorRate: 2,\n          intervalMs: 60000,\n          fallbackFn: cancel\n        },\n        default: {\n          callVolume: 3,\n          errorRate: 3,\n          intervalMs: 60000\n        }\n      }\n    },\n    trackShipment: {\n      service: 'Shipping',\n      type: 'outbound',\n      keys: ['trackingStatus', 'trackingId'],\n      consumesEvent: 'orderShipped',\n      producesEvent: 'orderDelivered',\n      circuitBreaker: {\n        portRetryFailed_order: {\n          callVolume: 2,\n          errorRate: 1,\n          intervalMs: 60000\n        }\n      }\n    },\n    verifyDelivery: {\n      service: 'Shipping',\n      type: 'outbound',\n      keys: 'proofOfDelivery',\n      consumesEvent: 'orderDelivered',\n      producesEvent: 'deliveryVerified',\n      undo: returnDelivery\n    },\n    completePayment: {\n      service: 'Payment',\n      type: 'outbound',\n      callback: paymentCompleted,\n      consumesEvent: 'deliveryVerified',\n      producesEvent: 'orderComplete',\n      undo: refundPayment\n    },\n    cancelShipment: {\n      service: 'Shipping',\n      type: 'outbound'\n    },\n    refundPayment: {\n      service: 'Payment',\n      type: 'outbound'\n    }\n  },\n  relations: {\n    customer: {\n      modelName: 'customer',\n      type: 'manyToOne',\n      foreignKey: 'customerId',\n      desc: 'Many orders per customer, just one customer per order'\n    },\n    inventory: {\n      modelName: 'inventory',\n      type: 'containsMany',\n      foreignKey: 'itemId',\n      arrayKey: 'orderItems',\n      desc: 'An order contains a list of inventory items to ship.'\n    }\n  },\n  commands: {\n    decrypt: {\n      command: 'decrypt',\n      acl: ['read', 'decrypt']\n    },\n    approve: {\n      command: approve,\n      acl: ['write', 'approve']\n    },\n    cancel: {\n      command: cancel,\n      acl: ['write', 'cancel']\n    },\n    runFibonacci: {\n      command: model => {\n        const start = Date.now()\n        function fibonacci (x) {\n          if (x === 0) {\n            return 0\n          }\n          if (x === 1) {\n            return 1\n          }\n          return fibonacci(x - 1) + fibonacci(x - 2)\n        }\n        const param = parseFloat(model.fibonacci)\n        return {\n          result: fibonacci(Number.isNaN(param) ? 10 : param),\n          time: Date.now() - start\n        }\n      },\n      acl: ['read', 'write']\n    }\n  },\n  routes: {\n    '/api/accounts/:id/issues': {\n      get (req, res) {}\n    },\n    '/api/orders/:id/accounts/:accountid': {\n      put: accountOrder,\n      get (req, res) {\n        res.send(JSON.stringify(req.model.account()))\n      },\n      delete (req, res) {\n        res.status(304).send('not permitted')\n      }\n    }\n  },\n  serializers: [\n    {\n      on: 'deserialize',\n      key: 'creditCardNumber',\n      type: 'string',\n      value: (key, value) => decrypt(value),\n      enabled: false\n    },\n    {\n      on: 'deserialize',\n      key: 'shippingAddress',\n      type: 'string',\n      value: (key, value) => decrypt(value),\n      enabled: false\n    },\n    {\n      on: 'deserialize',\n      key: 'billingAddress',\n      type: 'string',\n      value: (key, value) => decrypt(value),\n      enabled: false\n    }\n  ]\n}\n","'use strict'\n\nimport { validateModel } from '../domain/mixins'\nimport { userFactory, userMixins } from '../domain/user'\nimport { uuid } from '../domain/utils'\n\n/**\n * @type {import('../domain').ModelSpecification}\n */\nexport const User = {\n  modelName: 'user',\n  endpoint: 'users',\n  dependencies: { uuid },\n  factory: userFactory,\n  mixins: userMixins,\n  validate: validateModel,\n  relations: {\n    customer: {\n      foreignKey: 'customerId',\n      type: 'oneToOne',\n      modelName: 'customer'\n    }\n  }\n}\n","\"use strict\";\n\nexport default function makeAdapters(ports, adapters, services) {\n  if (!ports || !adapters) {\n    return;\n  }\n  return Object.keys(ports)\n    .map(port => {\n      if (!adapters[port]) {\n        return;\n      }\n\n      try {\n        return {\n          [port]: adapters[port](services[ports[port].service]),\n        };\n      } catch (e) {\n        console.warn(e.message);\n      }\n    })\n    .reduce((p, c) => ({ ...p, ...c }));\n}\n","'use strict'\n\n/**\n * Check the payload for expected properties.\n * @param {string|string[]} key name of property or properties\n * @param {*} options\n * @param {*} payload\n * @param {*} port\n */\nexport default function checkPayload (\n  key,\n  options = {},\n  payload = {},\n  port = checkPayload.name\n) {\n  const { model } = options\n\n  if (!model || Object.keys(payload) < 1 || !key) {\n    throw new Error({\n      desc: 'model, payload, or key is missing',\n      model,\n      port,\n      error,\n      payload,\n      key\n    })\n  }\n\n  if (Array.isArray(key)) {\n    const keys = key.map(k => checkPayload(k, options, payload, port))\n\n    return keys.reduce((p, c) => ({ ...p, ...c }))\n  }\n\n  if (payload[key]) {\n    return { [key]: payload[key] }\n  }\n\n  if (model[key]) {\n    return { [key]: model[key] }\n  }\n\n  return model\n    .find()\n    .then(latest => ({ [key]: latest[key] }))\n    .catch(error => {\n      throw new Error('property is missing' + key, port, error, payload, model)\n    })\n}\n","'use strict'\n\n/**\n * @typedef {string} eventName\n */\n\n/**\n * @typedef  Model\n * @property {string} _Symbol_id - immutable/private uuid\n * @property {string} _Symbol_modelName - immutable/private name\n * @property {string} _Symbol_createTime - immutable/private createTime\n * @property {onUpdate} _Symbol_onUpdate - immutable/private update function\n * @property {onDelete} _Symbol_onDelete\n * @property {function(Object)} update - use this function to update model\n * specify changes in an object\n * @property {function()} toJSON - de/serialization logic\n * @property {function(eventName,function(eventName,Model):void)} addListener listen for domain events\n * @property {function(eventName,Model):Promise<void>} emit emit domain event\n * @property {function(function():Promise<Model>):Promise<Model>} [port] - when a\n * port is configured, the framework generates a function to invoke it. When data\n * arrives on the port, depending on the implementation, the port's adapter invokes\n * the callback specified in the port configuration, or as an argument to the port\n * function. The callback returns an updated Model, and control is returned to the\n * caller. Optionally, an event is fired to trigger the next port function to run\n * @property {function():Promise<any>} [relation] - when you configure a relation,\n * the framework generates a function that your code can call to run the query\n * @property {function(*):*} [command] - the framework will call any model method\n * you specify when passed as a parameter or query in an API call.\n */\n\n/**\n * @callback onUpdate called to handle model updates\n * @param {Model} model\n * @param {Object} changes\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback onDelete\n * @param {Model} model\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback validate called to handle model updates\n * @param {Model} model\n * @param {Object} changes\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @callback onLoad\n * @param {Model} savedModel rehydrated model\n * @returns {Model | Error} updated model or throw\n */\n\n/**\n * @typedef {string} service - name of the service object to inject in adapter\n * @typedef {number} timeout - call to adapter will timeout after `timeout` milliseconds\n *\n * @typedef {{\n *  [x: string]: {\n *    service: service,\n *    timeout?: timeout,\n *    callback?: function({model: Model})\n *    errorCallback?: function({model: Model, port: string, error:Error}),\n *    timeoutCallback?: function({model: Model, port: string}),\n *    consumesEvent?:string,\n *    producesEvent?:string,\n *    type?:'inbound'|'outbound',\n *    disabled?: boolean,\n *    adapter?: string,\n *    circuitBreaker?: thresholds\n *  }\n * }} ports - input/output ports for the domain\n */\n\n/**\n * @typedef {{\n *  [x:string]: {\n *    errorRate:number\n *    callVolume:number,\n *    intervalMs:number,\n *    fallbackFn:function()\n *  },\n * }} thresholds - thresholds for different errors\n */\n\n/**\n * @typedef {{\n *  [x: string]: {\n *    modelName:string,\n *    type:\"oneToMany\"|\"oneToOne\"|\"manyToOne\",\n *    foreignKey:any,\n *  }\n * }} relations - define related domain entities\n *\n * @typedef {Array<function({\n *  eventName:string,\n *  eventType:string,\n *  eventTime:string,\n *  modelName:string,\n *  model:Model\n * }):Promise<void>>} eventHandler - callbacks invoked to handle domain and\n * application events\n */\n\n/**\n *\n * @typedef {string} key\n * @typedef {*} value\n */\n\n/**\n * @typedef {{\n *  on: \"serialize\" | \"deserialize\",\n *  key: string | RegExp | \"*\" | (function(key,value):boolean)\n *  type: \"string\" | \"object\" | \"number\" | \"function\" | \"any\" | (function(key,value):boolean)\n *  value(key, value):value\n * }} serializer\n */\n/**\n * @typedef {{\n *  [x:string]: {\n *    allow:string|function(*):boolean|Array<string|function(*):boolean>\n *    deny:string|function(*):boolean|Array<string|function(*):boolean>\n *    type:\"role\"|\"relation\"|\"command\"\n *    desc?:string\n *  }\n * }} accessControlList\n */\n/**\n * @typedef {{\n *  [x: string]: {\n *    command:string|function(Model):Promise<any>,\n *    acl:accessControlList[]\n *  }\n * }} commands - configure functions to execute when specified in a\n * URL parameter or query of the auto-generate REST API\n */\n/**\n * @callback controller\n * @param {Request} req\n * @param {Response} res\n */\n\n/**\n * @typedef {{\n *  [path: string]: {\n *    get?: controller,\n *    post?: controller,\n *    patch?: controller,\n *    delete?:controller\n *   }\n * }} endpoints\n */\n\n/**\n * @callback modelSpecFactoryFn\n * @param {object} dependencies\n * @returns {function(...args):Readonly<object>}\n */\n\n/**\n * @typedef {object} ModelSpecification Specify domain model properties and functions\n * @property {string} modelName name of model (case-insenstive)\n * @property {string} endpoint URI reference (e.g. plural of `modelName` noun)\n * @property {modelSpecFactoryFn} factory returns factory function that creates the model instance\n * @property {object} [dependencies] injected into the model for inverted dependency/control\n * @property {Array<import(\"./mixins\").functionalMixin>} [mixins] - use functional mixins\n * to compose the object from common domain logic, like input validation.\n * @property {onUpdate} [onUpdate] - Function called to handle update requests. Called\n * before save.\n * @property {onDelete} [onDelete] - Function called before deletion.\n * @property {validate} [validate] - called to validate model updates\n * @property {ports} [ports] - input/output ports for the domain\n * @property {eventHandler[]} [eventHandlers] - callbacks invoked to handle application\n * events, e.g. CRUD events\n * @property {serializer[]} [serializers] - use for custom de/serialization of the model\n * when reading or writing to storage or network\n * @property {relations} [relations] - create related models or query in aggregate\n * @property {commands} [commands] - define functions to execute when specified in a\n * URL parameter or query of the auto-generated REST API\n * @property {accessControlList} [accessControlList] - configure authorization\n * @property {endpoints} [routes] - additional custom API endpoints - specify inbound port\n * @property {{factory:import(\"../adapters/datasources/datasource-mongodb\"),url:string,credentials?:string}} [datasource] - custom datasource\n * for this model. If not set, the default set by the server is used.\n *\n */\n\nimport GlobalMixins from './mixins'\nimport bindAdapters from './bind-adapters'\n// Service dependencies\nimport * as services from '../../test/mock'\nimport * as adapters from '../adapters'\n// Model properties\nimport * as modelSpecs from '../config'\n\nfunction validateSpec (spec) {\n  const missing = ['modelName', 'endpoint', 'factory'].filter(key => !spec[key])\n  if (missing?.length > 0) {\n    throw new Error(\n      `missing properties: ${missing}, spec: ${Object.entries(spec)}`\n    )\n  }\n}\n\n/**\n * @param {ModelSpecification} spec\n * @param {*} dependencies - services injected\n */\nfunction makeModel (spec) {\n  validateSpec(spec)\n  const mixins = spec.mixins || []\n  const dependencies = spec.dependencies || {}\n  return {\n    ...spec,\n    mixins: mixins.concat(GlobalMixins),\n    dependencies: {\n      ...dependencies,\n      ...bindAdapters(spec.ports, adapters, services)\n    }\n  }\n}\n\nexport const models = Object.values(modelSpecs).map(spec => makeModel(spec))\n","'use strict'\n\nexport const assetTypes = ['rotating-asset', 'spare-part']\nexport const properties = ['height', 'length', 'width', 'weight', 'color']\nexport const categories = ['home', 'auto', 'business']\n\nexport const makeInventoryFactory = dependencies => ({\n  category,\n  properties,\n  price,\n  discount,\n  name,\n  desc,\n  sku,\n  purchaseOrder,\n  vendor,\n  inStock,\n  assetType,\n  quantity\n}) =>\n  Object.freeze({\n    category,\n    properties,\n    price: price - (discount || 0.0),\n    name,\n    desc,\n    sku,\n    purchaseOrder,\n    vendor,\n    inStock,\n    assetType,\n    quantity\n  })\n","'use strict'\n\nimport { hash, encrypt, decrypt, compose } from '../domain/utils'\nimport util from 'util'\n\n/**\n * Functional mixin created by `functionalMixinFactory`\n * @callback functionalMixin\n * @param {Object} o Object to compose\n * @returns {Object} Composed object\n */\n\n/**\n * Functional mixin factory - partial application - returns mixin function\n * @callback functionalMixinFactory\n * @param {*} mixinParams params for mixin function\n * @returns {functionalMixin}\n */\n\n/**\n * @typedef {import(\"../domain/index\").Model} Model\n */\n\n/**\n * Private key to access previous version of the model\n */\nexport const prevmodel = Symbol('prevModel')\n/**\n * private key to access validation config\n */\nexport const validations = Symbol('validations')\n/**\n * Process mixin pre or post update\n */\nexport const mixinType = {\n  pre: Symbol('pre'),\n  post: Symbol('post')\n}\n\n/**\n * Stored mixins - use private symbol as key to prevent overwrite\n */\nexport const mixinSets = {\n  [mixinType.pre]: Symbol('preUpdateMixins'),\n  [mixinType.post]: Symbol('postUpdateMixins')\n}\n\n/**\n * Set of pre mixins\n */\nconst premixins = mixinSets[mixinType.pre]\n/**\n * Set of post mixins\n */\nconst postmixins = mixinSets[mixinType.post]\n\n/**\n * Apply any pre and post mixins and return the result.\n * @deprecated\n * @param {*} model - current model\n * @param {*} changes - object containing changes\n * @returns {import('.').Model} updated model\n */\nexport function processUpdate (model, changes) {\n  changes[prevmodel] = JSON.parse(JSON.stringify(model)) // keep history\n\n  const updates = model[premixins]\n    ? compose(...model[premixins].values())(changes)\n    : changes\n\n  const updated = { ...model, ...updates }\n\n  return model[postmixins]\n    ? compose(...model[postmixins].values())(updated)\n    : updated\n}\n\n/**\n * @deprecated\n * Store mixins for execution on update\n * @param {mixinType} type\n * run before changes are applied or afterward\n * @param {*} o  Object containing changes to apply (pre)\n * or new object after changes have been applied (post)\n * @param {string} name `Function.name`\n * @param {functionalMixin} cb mixin function\n */\nexport function updateMixins (type, o, name, cb) {\n  if (!mixinSets[type]) {\n    throw new Error('invalid mixin type')\n  }\n\n  const mixinSet = o[mixinSets[type]] || new Map()\n\n  if (!mixinSet.has(name)) {\n    mixinSet.set(name, cb())\n\n    return {\n      ...o,\n      [mixinSets[type]]: mixinSet\n    }\n  }\n  return o\n}\n\n/**\n * bitmask for identifying events\n */\nconst eventMask = {\n  update: 1, //  0001 Update\n  create: 1 << 1, //  0010 Create\n  onload: 1 << 2 //  0100 Load\n}\n\nfunction handleUpdateEvent (model, updates, event) {\n  const isUpdate = eventMask.update & event\n  const decrypted = isUpdate ? model.decrypt() : {}\n  return {\n    ...model,\n    ...updates,\n    ...decrypted\n  }\n}\n\nfunction isObject (p) {\n  return p != null && typeof p === 'object'\n}\n\nfunction containsUpdates (model, changes, event) {\n  try {\n    if (!changes) return false\n    if (eventMask.update & event) {\n      const changeList = Object.keys(changes)\n      if (changeList.length < 1) return false\n\n      if (\n        changeList.every(\n          k => model[k] && util.isDeepStrictEqual(changes[k], model[k])\n        )\n      ) {\n        return false\n      }\n    }\n    return true\n  } catch (error) {\n    console.error({ fn: containsUpdates.name, error })\n  }\n  return false\n}\n\n/**\n * Run validation functions enabled for a given event.\n * @param {Model} model - the composed object\n * @param {*} changes - object containing changes\n * @param {Number} event - Indicates what event is occuring:\n * 1st bit turned on means update, 2nd bit create, 3rd load,\n * see {@link eventMask}.\n */\nexport function validateModel (model, changes, event) {\n  if (!model || !changes || !event) return {}\n  // if there are no changes, and the event is an update, return\n  if (!containsUpdates(model, changes, event)) {\n    return model\n  }\n\n  // keep a history of the last saved model\n  const input = { ...changes, [prevmodel]: JSON.parse(JSON.stringify(model)) }\n\n  // Validate just the input data\n  const updates = model[validations]\n    .filter(v => v.input & event)\n    .sort((a, b) => a.order - b.order)\n    .map(v => model[v.name].apply(input))\n    .reduce((p, c) => ({ ...p, ...c }), input)\n\n  const updated = { ...model, ...updates }\n\n  // Validate the updated model\n  return updated[validations]\n    .filter(v => v.output & event)\n    .sort((a, b) => a.order - b.order)\n    .map(v => updated[v.name]())\n    .reduce((p, c) => ({ ...p, ...c }), updated)\n}\n\n/**\n * Enable validation to run on specific events.\n * @param {boolean} onUpdate - whether or not to run the validation on update.\n * Defaults to `true`.\n * @param {boolean} onCreate - whether or not to run the validation on create.\n * Defaults to `true`.\n * @param {boolean} onLoad - whether or not to run the validation when\n * the object is being loaded into memory after being deserialized.\n * Defaults to `false`.\n */\nfunction enableEvent (onUpdate = true, onCreate = true, onLoad = false) {\n  let enabled = 0\n\n  if (onUpdate) {\n    enabled |= eventMask.update\n  }\n  if (onCreate) {\n    enabled |= eventMask.create\n  }\n  if (onLoad) {\n    enabled |= eventMask.onload\n  }\n  return enabled\n}\n\n/**\n * Specify when validations run.\n */\nconst enableValidation = (() => {\n  return {\n    /**\n     * Validation runs on update.\n     */\n    onUpdate: enableEvent(true, false, false),\n    /**\n     * Validation runs on create.\n     */\n    onCreate: enableEvent(false, true, false),\n    /**\n     * Validation runs on both create and update.\n     */\n    onCreateAndUpdate: enableEvent(true, true, false),\n    /**\n     * Validation runs on load.\n     */\n    onLoad: enableEvent(false, false, true),\n    /**\n     * Validation runs on all events.\n     */\n    onAll: enableEvent(true, true, true),\n    /**\n     * Validation runs on zero events (disabled).\n     */\n    never: enableEvent(false, false, false)\n  }\n})()\n\n/**\n * Add a validation function to be called for a given event.\n * @typedef {object} validationConfig\n * @property {*} o - the composed object\n * @property {string} name - name of function to run\n * @property {number} input - \"input\" validations run against\n * the data passed by the caller in the request. Use `enableValidation`\n * to provide a value for this param.\n * @property {number} output - \"output\" functions run against the\n * model after the changes have been applied.\n * @property {number} order - order in which validation runs\n * @param {validationConfig} param0\n */\nfunction addValidation ({ model, name, input = 0, output = 0, order = 50 }) {\n  const config = model[validations] || []\n\n  if (config.some(v => v.name === name)) {\n    console.warn('duplicate validation name', name)\n    return model\n  }\n\n  return {\n    ...model,\n    validateModel,\n    [validations]: [...config, { name, input, output, order }]\n  }\n}\n\n/**\n * Resolve keys:\n * If the value includes an array, flatten it, then for each element:\n * If the value is \"*\", return all keys of the object.\n * If the value is a function, execute it to get a dynamic key or key list.\n * If the value is a RegExp, test it to get dynamic key list.\n * If any of the above produce an array of keys, flatten it.\n * @param {*} o - Object to compose\n * @param  {Array<string | function(*):string>} propKeys -\n * Names (or functions that return names) of properties\n * @returns {string[]} list of (resolved) property keys\n */\nfunction parseKeys (o, ...propKeys) {\n  if (!propKeys || !o) return null\n  const keys = propKeys.flat().map(function (k) {\n    if (typeof k === 'function') return k(o)\n    if (k instanceof RegExp) return Object.keys(o).filter(key => k.test(key))\n    if (k === '*') return Object.keys(o)\n    return k\n  })\n  return keys.flat()\n}\n\n/**\n * Encrypt properties. Properties remain encrypted indefinitely, and\n * must be explicitly decrypted as needed, e.g. reading values in memory,\n * from storage, serializing and sending to an external system.\n * @param  {Array<string | function(*):string>} propKeys -\n * Names (or functions that return names) of properties to encrypt\n * @returns {functionalMixin} mixin function\n */\nexport const encryptProperties = (...propKeys) => o => {\n  const keys = parseKeys(o, ...propKeys)\n\n  const encryptProps = obj => {\n    return keys\n      .map(key => (obj[key] ? { [key]: encrypt(obj[key]) } : {}))\n      .reduce((p, c) => ({ ...p, ...c }))\n  }\n\n  return {\n    encryptProperties () {\n      return encryptProps(this)\n    },\n\n    ...addValidation({\n      model: o,\n      name: encryptProperties.name,\n      input: enableValidation.onUpdate,\n      output: enableValidation.onCreate,\n      order: 100\n    }),\n\n    decrypt () {\n      return keys\n        .map(key => (this[key] ? { [key]: decrypt(this[key]) } : {}))\n        .reduce((p, c) => ({ ...p, ...c }))\n    }\n  }\n}\n\n/**\n * Prevent properties from being modified.\n * Accepts a property name or a function that returns a property name.\n * @param  {Array<string | function(*):string | RegExp>} propKeys - names of properties to freeze\n */\nexport const freezeProperties = (...propKeys) => o => {\n  const preventUpdates = obj => {\n    const keys = parseKeys(obj, ...propKeys)\n\n    const mutations = Object.keys(obj).filter(key => keys.includes(key))\n    if (mutations?.length > 0) {\n      throw new Error(`cannot update readonly properties: ${mutations}`)\n    }\n  }\n\n  return {\n    freezeProperties () {\n      preventUpdates(this)\n    },\n\n    ...addValidation({\n      model: o,\n      name: freezeProperties.name,\n      input: enableValidation.onUpdate,\n      order: 20\n    })\n  }\n}\n\n/**\n * Enforce required fields.\n * @param {Array<string | function(*):string | RegExp>} propKeys -\n * required property key names - can be a function or regex\n * that returns the property key names\n */\nexport const requireProperties = (...propKeys) => o => {\n  const keys = parseKeys(o, ...propKeys)\n\n  function requireProps (obj) {\n    const missing = keys.filter(key => key && !obj[key])\n    if (missing?.length > 0) {\n      throw new Error(`missing required properties: ${missing}`)\n    }\n  }\n  return {\n    requireProperties () {\n      requireProps(this)\n    },\n\n    ...addValidation({\n      model: o,\n      name: requireProperties.name,\n      output: enableValidation.onCreateAndUpdate,\n      order: 90\n    })\n  }\n}\n\n/**\n * Hash passwords.\n * @param {*} hash hash algorithm\n * @param  {Array<string | function(*):string | RegExp>} propKeys name of password props\n */\nexport const hashPasswords = (...propKeys) => o => {\n  const keys = parseKeys(o, ...propKeys)\n\n  function hashPwds (obj) {\n    return keys\n      .map(key => (obj[key] ? { [key]: hash(obj[key]) } : {}))\n      .reduce((p, c) => ({ ...p, ...c }))\n  }\n\n  return {\n    hashPasswords () {\n      return hashPwds(this)\n    },\n\n    ...addValidation({\n      model: o,\n      name: hashPasswords.name,\n      input: enableValidation.onUpdate,\n      output: enableValidation.onCreate,\n      order: 100\n    })\n  }\n}\n\nconst internalPropList = []\n\n/**\n * Reject unknown properties in user input. Allow only approved keys.\n * @param  {...any} propKeys\n */\nexport const allowProperties = (...propKeys) => o => {\n  function rejectUnknownProps () {\n    const keys = parseKeys(o, ...propKeys)\n    const allowList = keys.concat(internalPropList)\n\n    const unknownProps = Object.keys(o).filter(key => !allowList.includes(key))\n\n    if (unknownProps?.length > 0) {\n      throw new Error(`invalid properties: ${unknownProps}`)\n    }\n  }\n\n  return {\n    rejectUnknownProperties () {\n      return rejectUnknownProps(this)\n    },\n\n    ...addValidation({\n      model: o,\n      name: rejectUnknownProps.name,\n      input: enableValidation.onUpdate,\n      order: 10\n    })\n  }\n}\n\n/**\n * Test regular expressions\n */\nexport const RegEx = {\n  email: /^(.+)@(.+){2,}\\.(.+){2,}$/,\n  ipv4Address: /^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$/,\n  ipv6Address: /^((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*::((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4}))*|((?:[0-9A-Fa-f]{1,4}))((?::[0-9A-Fa-f]{1,4})){7}$/,\n  phone: /^[1-9]\\d{2}-\\d{3}-\\d{4}/,\n  creditCard: /^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n  ssn: /^(?!666|000|9\\\\d{2})\\\\d{3}-(?!00)\\\\d{2}-(?!0{4})\\\\d{4}$/,\n  /**\n   * Allow caller to pass a keyword that refers to one of the regex above\n   * @param {regexType} expr\n   * @param {*} val\n   */\n  test (expr, val) {\n    const _expr =\n      Object.keys(this).includes(expr) && this[expr] instanceof RegExp\n        ? this[expr]\n        : expr\n    return _expr.test(val)\n  }\n}\n\n/**\n * @callback isValid\n * @param {Object} o - the property owner\n * @param {*} propVal - the property value\n * @returns {boolean} - true if valid\n *\n * @typedef {'email'|'phone'|'ipv4Address'|'ipv6Address'|'creditCard'|'ssn'|RegExp} regexType\n *\n * @typedef {{\n *  propKey:string,\n *  isValid?:isValid,\n *  values?:any[],\n *  regex?:regexType,\n *  maxlen?:number\n *  maxnum?:number\n *  typeof?:string\n *  unique?:{ encrypted:boolean }\n * }} validation\n */\n\nfunction evaluateUniqueness (v, o, propVal) {\n  const compareVal = v.unique.encrypted ? encrypt(propVal) : propVal\n  return o.listSync({ [v.propKey]: compareVal }).length < 1\n}\n\n/**\n * Run validation tests\n */\nconst Validator = {\n  tests: {\n    isValid: (v, o, propVal) => v.isValid(o, propVal),\n    values: (v, o, propVal) => v.values.includes(propVal),\n    regex: (v, o, propVal) => RegEx.test(v.regex, propVal),\n    typeof: (v, o, propVal) => v.typeof === typeof propVal,\n    maxnum: (v, o, propVal) => v.maxnum + 1 > propVal,\n    maxlen: (v, o, propVal) => v.maxlen + 1 > propVal.length,\n    unique: (v, o, propVal) => evaluateUniqueness(v, o, propVal)\n  },\n  /**\n   * Returns true if tests pass.\n   * @param {validation} v validation config\n   * @param {Object} o object to compose\n   * @param {*} propVal value of property to validate\n   * @returns {boolean} true if tests pass\n   */\n  isValid (v, o, propVal) {\n    return Object.keys(this.tests).every(key => {\n      if (v[key]) {\n        // the test `key` is specified, run it\n        return this.tests[key](v, o, propVal)\n      }\n      return true\n    })\n  }\n}\n\n/**\n * Verify a property value is a member of a list,\n * is unique within a set of model instances,\n * is of a certain length, size or type,\n * matches a regular expression,\n * or satisfies a custom validation function.\n * @param {validation[]} validations\n */\nexport const validateProperties = validations => o => {\n  function validate (obj) {\n    const invalid = validations.filter(v => {\n      const propVal = obj[v.propKey]\n\n      if (!propVal) {\n        return false\n      }\n      return !Validator.isValid(v, obj, propVal)\n    })\n\n    if (invalid?.length > 0) {\n      throw new Error(`invalid value for ${[...invalid.map(v => v.propKey)]}`)\n    }\n  }\n\n  return {\n    validateProperties () {\n      validate(this)\n    },\n\n    ...addValidation({\n      model: o,\n      name: validateProperties.name,\n      input: enableValidation.onUpdate,\n      output: enableValidation.onCreate,\n      order: 50\n    })\n  }\n}\n\n/**\n * @callback updaterFn\n * @param {Object} o\n * @param  {*} propVal\n * @returns {Object} object with updated properties\n *\n * @typedef {{\n * propKey: string,\n * update: updaterFn\n * }} updater\n */\n\n/**\n * Respond to property updates by updating addtional (dependent) properties as needed.\n * @param {updater[]} updaters\n */\nexport const updateProperties = updaters => o => {\n  function updateProps (obj) {\n    const updates = updaters.filter(u => obj[u.propKey])\n\n    if (updates?.length > 0) {\n      return updates\n        .map(u => u.update(o, obj[u.propKey]))\n        .reduce((p, c) => ({ ...p, ...c }))\n    }\n  }\n\n  return {\n    updateProperties () {\n      return updateProps(this)\n    },\n\n    ...addValidation({\n      model: o,\n      name: updateProperties.name,\n      input: enableValidation.onUpdate,\n      order: 30\n    })\n  }\n}\n\n/**\n * Set a validation that invokes a port. The port must be configured\n * in the `ModelSpecification`.\n * @param {string} fn - name of port (as it appears in the ModelSpec)\n * @param {boolean} onCreate - invoke on create\n * @param {boolean} onUpdate - invoke on update\n * @param  {...any} args - pass arguments\n */\nexport const invokePort = (fn, onCreate, onUpdate, ...args) => async o => {\n  return {\n    ...o,\n    invokePort () {\n      console.log({ func: 'invokePort', fn, args })\n      return this[fn](...args).then(o => o)\n    },\n\n    ...addValidation({\n      model: o,\n      name: 'invokePort',\n      output: enableValidation.onUpdate,\n      order: 85\n    })\n  }\n}\n\n/**\n * Set a validation that calls a model method or provided function.\n * @param {string|function(Model, ...any):Promise<any>} fn - callback function\n * or name of method to executee\n * @param {boolean} onCreate - invoke on create\n * @param {boolean} onUpdate - invoke on update\n * @param  {...any} args - pass arguments to the method/function\n * @return {Model}\n */\nexport const execMethod = (fn, onCreate, onUpdate, ...args) => async o => {\n  const functionType = {\n    function: (fn, obj, ...args) => fn(obj, ...args).then(o => o),\n    string: (fn, obj, ...args) => obj[fn](...args).then(o => o)\n  }\n\n  return {\n    ...o,\n    async execMethod () {\n      const model = await functionType[typeof fn](fn, this, ...args)\n      return model\n    },\n\n    ...addValidation({\n      model: o,\n      name: 'execMethod',\n      output: enableValidation.onUpdate,\n      order: 40\n    })\n  }\n}\n\n/**\n * Create a method on a model.\n * @param {*} fn\n * @param  {...any} args\n */\nexport const createMethod = (fn, ...args) => o => {\n  return {\n    ...o,\n    [fn.name]: () => fn(...args)\n  }\n}\n\n/**\n * Check the value of the property before returning its key.\n * @param {*} propKey\n * @param {regexType} expr\n * @returns {function(any):any} dynamic property func\n */\nexport const withValidFormat = (propKey, expr) => o => {\n  if (o[propKey] && !RegEx.test(expr, o[propKey])) {\n    throw new Error(`invalid ${propKey}`)\n  }\n  return propKey\n}\n\n/**\n *\n * @param {string} value\n * @param {regexType} expr\n */\nexport const checkFormat = (value, expr) => {\n  if (value && !RegEx.test(expr, value)) {\n    const x = expr instanceof RegExp ? value : expr\n    throw new Error(`${x} invalid`)\n  }\n}\n\n/**\n * Implement GDPR encryption requirement across models\n */\nexport const encryptPersonalInfo = encryptProperties(\n  /^last.*Name$|^surname$|^family.*Name$/i,\n  /^shipping.*Address$/i,\n  /^billing.*Address$/i,\n  /^home.*Address$/i,\n  /email|e-mail/i,\n  /^phone$|^home.*phone$/i,\n  /^mobile$|^mobile.*number$|^cell.*number$/i,\n  /^credit.*Card/i,\n  /^cvv$/i,\n  /^ssn$|^socialSecurity/i,\n  /^encrypted/i\n)\n\n/**\n * Global mixins\n */\nconst GlobalMixins = [encryptPersonalInfo]\n\nexport default GlobalMixins\n","'use strict'\n\nimport { prevmodel } from './mixins'\nimport { asyncPipe } from '../domain/utils'\nimport checkPayload from './check-payload'\n\n/** @typedef { import('../domain/index.js').ModelSpecification} ModelSpecification */\n/** @typedef {string|RegExp} topic*/\n/** @typedef {function(string)} eventCallback*/\n/** @typedef {import('../adapters/index').adapterFunction} adapterFunction*/\n/** @typedef {string} id */\n/** @typedef {import(\"./customer\").Customer} Customer */\n/** @typedef {function(Order)} undoFunction */\n/**\n * @callback logMessageFn\n * @param {object|string} message\n * @param {logType} [type]\n */\n\n/** @typedef {'first'|'last'|'lastStateChange'|'stateChange'|'error'|'undo'} logType */\n\n/**\n * @typedef readLogType\n * @property {number} index\n * @property  {logType} type\n */\n\n/**\n * @typedef {{\n *  itemId: string,\n *  price: number,\n *  qty?: number\n * }} orderItemType\n */\n\n/**\n * @callback relationFunction\n * @property {...args}\n * @returns {Promise<Model>}\n * } relationFunction\n */\n\n/**\n *  @typedef {Object} Order The Order Service\n * @property {function(topic,eventCallback)} listen - listen for events\n * @property {import('../adapters/event-adapter').notifyType} notify\n * @property {adapterFunction} validateAddress - returns valid address or throws exception\n * @property {adapterFunction} completePayment - completes payment for an authorized charge\n * @property {adapterFunction} verifyDelivery - verify the order was received by the customer\n * @property {adapterFunction} trackShipment\n * @property {adapterFunction} refundPayment\n * @property {relationFunction} inventory - reserve inventory items\n * @property {adapterFunction} undo - undo all transactions up to this point\n * @property {function():Promise<Order>} pickOrder - pick items from warehouse and prepare for shipment\n * @property {adapterFunction} authorizePayment - verify payment, i.e. reserve the balance due\n * @property {import('../adapters/shipping-adapter').shipOrder} shipOrder -\n * calls shipping service to print label and request delivery\n * @property {function(Order):Promise<void>} save - saves order\n * @property {function():Promise<Order>} find - finds order\n * @property {string} shippingAddress\n * @property {string} orderNo = the order number\n * @property {string} trackingId - id given by tracking status for this `orderNo`\n * @property {function():Order} decrypt - decrypts sensitive properties\n * @property {function({key1:any,keyN:any}, boolean):Promise<Order>} update - update the order,\n * set the second arg to false to turn off validation.\n * @property {'PENDING'|'APPROVED'|'SHIPPING'|'CANCELED'|'COMPLETED'} orderStatus\n * @property {function(...args):Promise<import(\"../domain/index\").Model>} customer - retrieves related customer object,\n * or if args are provided, creates a new customer object, using the provided args as the input.\n * @property {function(string,Order):Promise} emit - broadcast domain event\n * @property {function():boolean} paymentAccepted - payment approved and funds reserved\n * @property {function():boolean} autoCheckout - whether or not to immediately submit the order\n * @property {boolean} saveShippingDetails save shipping and payment details in a new customer record\n * @property {{itemId:string,price:number,qty:number}[]} orderItems\n * @property {Symbol} customerId {@link Customer}\n * @property {logMessageFn} logEvent\n * @property {logMessageFn} logError\n * @property {logMessageFn} logUndo\n * @property {logMessageFn} logStateChange\n * @property {readMessageFn} readLog\n */\n\nconst orderStatus = 'orderStatus'\nconst orderTotal = 'orderTotal'\nconst orderNo = 'orderNo'\n\nexport const OrderStatus = {\n  PENDING: 'PENDING',\n  APPROVED: 'APPROVED',\n  SHIPPING: 'SHIPPING',\n  COMPLETE: 'COMPLETE',\n  CANCELED: 'CANCELED'\n}\n\n/**\n *\n * @param {orderItemType} orderItem\n * @returns {boolean} true if item is valid\n */\nexport const checkItem = function (orderItem) {\n  return (\n    typeof orderItem.itemId === 'string' && typeof orderItem.price === 'number'\n  )\n}\n\n/**\n * @param {orderItemType[]} orderItems\n */\nexport const checkItems = function (orderItems) {\n  if (!orderItems || orderItems.length < 1) {\n    throw new Error('order contains no items')\n  }\n  const items = Array.isArray(orderItems) ? orderItems : [orderItems]\n\n  if (items.length > 0 && items.every(checkItem)) {\n    return items\n  }\n  throw new Error('order items invalid')\n}\n\n/**\n * Calculate order total\n * @param {orderItemType[]} orderItems\n */\nexport const calcTotal = function (orderItems) {\n  const items = checkItems(orderItems)\n\n  return items.reduce((total, item) => {\n    const qty = item.qty || 1\n    return (total += item.price * qty)\n  }, 0)\n}\n\n/**\n * @param {orderItemType[]} orderItems\n * @returns {number} number of items\n */\nexport const itemCount = function (orderItems) {\n  return orderItems.reduce((total, item) => (total += item.qty || 1))\n}\n\n/**\n * No changes to `propKey` properties once the order is approved\n * @param {*} o - the order\n * @param {*} propKey\n * @returns {string | null} the key or `null`\n */\nexport const freezeOnApproval = propKey => o =>\n  o.orderStatus && o.orderStatus !== OrderStatus.PENDING ? propKey : null\n\nconst finalStatus = status =>\n  [OrderStatus.COMPLETE, OrderStatus.CANCELED].includes(status)\n\n/**\n * No changes to `propKey` once order is complete or canceled\n * @param {*} o - the order\n * @param {*} propKey\n * @returns {string | null} the key or `null`\n */\nexport const freezeOnCompletion = propKey => o =>\n  finalStatus() ? propKey : null\n\n/**\n * If not a registered customer, provide shipping & payment details.\n * @param {*} o\n * @param {*} propKey\n * @returns {string | void} the key or `void`\n */\nexport const requiredForGuest = propKey => o => (o.customerId ? null : propKey)\n\n/**\n * Value required to approve order.\n * @param {*} propKey\n */\nexport const requiredForApproval = propKey => o =>\n  o.orderStatus === OrderStatus.APPROVED ? propKey : null\n\n/**\n * Value required to complete order\n * @param {object} o\n * @param {string | string[]} propKey these props are required to comlete the order\n * @returns {string | void} the key or `void`\n */\nexport const requiredForCompletion = propKey => o =>\n  o.orderStatus === OrderStatus.COMPLETE ? propKey : null\n\n/**\n *\n * @param {enum} from\n * @param {enum} to\n * @returns\n */\nconst invalidStatusChange = (from, to) => (o, propVal) =>\n  propVal === to && o[prevmodel].orderStatus === from\n\nconst invalidStatusChanges = [\n  // Can't change back to pending once approved\n  invalidStatusChange(OrderStatus.APPROVED, OrderStatus.PENDING),\n  // Can't change back to pending once shipped\n  invalidStatusChange(OrderStatus.SHIPPING, OrderStatus.PENDING),\n  // Can't change back to approved once shipped\n  invalidStatusChange(OrderStatus.SHIPPING, OrderStatus.APPROVED),\n  // Can't change directly to shipping from pending\n  invalidStatusChange(OrderStatus.PENDING, OrderStatus.SHIPPING),\n  // Can't change directly to complete from pending\n  invalidStatusChange(OrderStatus.PENDING, OrderStatus.COMPLETE),\n  // Can't change final status\n  invalidStatusChange(OrderStatus.COMPLETE, OrderStatus.PENDING),\n  invalidStatusChange(OrderStatus.COMPLETE, OrderStatus.SHIPPING),\n  invalidStatusChange(OrderStatus.COMPLETE, OrderStatus.APPROVED),\n  invalidStatusChange(OrderStatus.COMPLETE, OrderStatus.CANCELED),\n  // Can't change final status\n  invalidStatusChange(OrderStatus.CANCELED, OrderStatus.PENDING),\n  invalidStatusChange(OrderStatus.CANCELED, OrderStatus.SHIPPING),\n  invalidStatusChange(OrderStatus.CANCELED, OrderStatus.APPROVED),\n  invalidStatusChange(OrderStatus.CANCELED, OrderStatus.COMPLETE)\n]\n\n/**\n * Check that status changes are valid\n */\nexport const statusChangeValid = (o, propVal) => {\n  if (invalidStatusChanges.some(i => i(o, propVal))) {\n    throw new Error('invalid status change')\n  }\n  return true\n}\n\n/**\n *\n * @param {*} o\n * @param {*} propVal\n */\nexport const orderTotalValid = (o, propVal) =>\n  calcTotal(o.orderItems) === propVal\n\n/**\n * Recalculate order total\n * @param {object} o - the object (order)\n * @param {number} propVal - the property value\n */\nexport const recalcTotal = (o, propVal) => ({\n  orderTotal: calcTotal(propVal)\n})\n\n/**\n * Updated signature requirement if `orderTotal` above certain value\n * @param {object} o - the object (order)\n * @param {number} propVal - the property value\n */\nexport const updateSignature = (o, propVal) => ({\n  signatureRequired: calcTotal(propVal) > 999.99 || o.signatureRequired\n})\n\n/**\n * Don't delete orders before they're complete.\n */\nexport function readyToDelete (model) {\n  if (\n    ![OrderStatus.COMPLETE, OrderStatus.CANCELED].includes(model.orderStatus)\n  ) {\n    throw new Error('order must be canceled or completed')\n  }\n  return model\n}\n\n/**\n *\n * @param {Error} error\n * @param {Order} order\n * @param {*} func\n */\nfunction handleError (error, order, func) {\n  const errMsg = { func, orderNo: order.orderNo, error }\n  if (order) order.emit('orderError', errMsg)\n\n  throw new Error(JSON.stringify(errMsg))\n}\n\n/**\n * Callback invoked by adapter when payment is complete\n * @param {{model:Order}} options\n */\nexport async function paymentCompleted (options = {}, payload = {}) {\n  const { model: order } = options\n  const changes = checkPayload(\n    'confirmationCode',\n    options,\n    payload,\n    paymentCompleted.name\n  )\n  return order.update({ ...changes, orderStatus: OrderStatus.COMPLETE })\n}\n\n/**\n * Callback invoked by shipping adapter when order is picked up.\n * @param {{model:Order}} options\n * @param {string} shipmentId\n */\nexport async function orderShipped (options = {}, payload = {}) {\n  const { model: order } = options\n  const shipmentPayload = checkPayload(\n    'shipmentId',\n    options,\n    payload,\n    orderShipped.name\n  )\n  return order.update({\n    shipmentId: shipmentPayload.shipmentId,\n    orderStatus: OrderStatus.SHIPPING\n  })\n}\n\n/**\n * Callback invoked when order is ready for pickup\n * @param {{ model:Order }} options\n */\nexport async function orderPicked (options = {}, payload = {}) {\n  const { model: order } = options\n  const changes = checkPayload(\n    'pickupAddress',\n    options,\n    payload,\n    addressValidated.name\n  )\n  return order.update(changes)\n}\n\n/**\n * Callback invoked when shippingAddress is verified (and possibly corrected)\n * @param {{ model:Order }} options\n * @param {string} shippingAddress\n */\nexport async function addressValidated (options = {}, payload = {}) {\n  const { model: order } = options\n  const addressPayload = checkPayload(\n    'shippingAddress',\n    options,\n    payload,\n    addressValidated.name\n  )\n  return order.update({ shippingAddress: addressPayload.shippingAddress })\n}\n\n/**\n * Called by adapter when port recevies response from payment service.\n * @param {{ model:Order }} options\n * @param {*} paymentAuthorization\n */\nexport async function paymentAuthorized (options = {}, payload = {}) {\n  const { model: order } = options\n  const changes = checkPayload(\n    'paymentStatus',\n    options,\n    payload,\n    paymentAuthorized.name\n  )\n  return order.update({ ...changes, paymentStatus }, false)\n}\n\n/**\n * Called to refund payment when order is canceled.\n * @param {*} options\n * @param {*} payload\n * @returns\n */\nexport async function refundPayment (order) {\n  // call port by same name.\n  order.refundPayment((options, payload) => {\n    const changes = checkPayload(\n      'refundReceipt',\n      options,\n      payload,\n      refundPayment.name\n    )\n    return order.update({ ...changes, orderStatus: OrderStatus.CANCELED })\n  })\n}\n\n/**\n *\n * @param {Order} order\n * @returns {Promise<Order>}\n */\nasync function verifyAddress (order) {\n  console.debug({\n    fn: verifyAddress.name,\n    validateAddress: order.validateAddress\n  })\n  return order.validateAddress(addressValidated)\n}\n\n/**\n * Request the bank or lender to place a hold on\n * the customer account in the amount of the payment\n * due, to be withdrawn once the shipment is safely\n * in our customer's hands, or credited back if things\n * don't work out.\n *\n * @param {Order} order\n * @returns {Promise<Order>}\n */\nasync function verifyPayment (order) {\n  try {\n    /**\n     * @type {Order}\n     */\n    const authorizeOrder = await order.authorizePayment(paymentAuthorized)\n\n    if (!authorizeOrder.paymentDeclined) {\n      throw new Error('payment declined')\n    }\n\n    return authorizeOrder\n  } catch (e) {\n    handleError(e, order, verifyPayment.name)\n  }\n  return order\n}\n\n/**\n *\n * @param {Order} order\n * @returns {Promise<Order>}\n * @throws {'InsufficientInventory'}\n */\nasync function verifyInventory (order) {\n  const inventory = await order.inventory()\n  if (inventory.length < 1) throw new Error('bad inventory ID')\n\n  const insufficient = order.orderItems.filter(item => {\n    const inv = inventory.find(i => i.id === item.itemId)\n    if (!inv) return true\n    if (inv.quantity < item.qty) return true\n    return false\n  })\n\n  if (insufficient.length > 0) {\n    order.emit('lowOrOutOfStock', insufficient)\n    throw new Error(`low or out of stock: ${insufficient.map(i => i.itemId)}`)\n  }\n}\n/**\n * Copy existing customer data into the order\n * or create new customer from order details.\n *\n * @param {Order} order\n * @throws {'InvalidCustomerId'}\n */\nasync function getCustomerOrder (order) {\n  // If an id is given, try fetching the model\n  if (order.customerId) {\n    if (!order.customer) {\n      console.log({ order })\n    }\n    // Use the relation defined in the spec\n    const customer = await order.customer()\n\n    if (!customer) {\n      throw new Error('invalid customer id', order.customerId)\n    }\n\n    // Add customer data to the order\n    const custInfo = { ...customer.decrypt(), firstName: customer.firstName }\n    const update = await order.update(custInfo)\n\n    console.info('update order with data from existing customer', custInfo)\n    return update\n  }\n\n  // Create a new customer from the shipping details\n  if (order.saveShippingDetails) {\n    const custInfo = { ...order.decrypt(), firstName: order.firstName }\n    const customer = await order.customer(custInfo)\n\n    console.info('create new customer with data from order', customer)\n    return order\n  }\n\n  return order\n}\n\n/**\n * Handle a new order:\n * - fetch or save customer info\n * - check item availability\n * - authorize payment\n * - verify shipping address\n */\nconst processPendingOrder = asyncPipe(\n  getCustomerOrder,\n  verifyInventory,\n  verifyPayment,\n  verifyAddress\n)\n\n/**\n * Implements the beginging of the order service workflow.\n * The rest is implemented by the {@link ModelSpecification}.\n * See the port configuration section of {@link Order}.\n */\nconst OrderActions = {\n  /**\n   * Verifies the shipping address and authorizes payment\n   * for the order total when the order is first created,\n   * or when it is updated while still in pending status.\n   *\n   * @param {Order} order - the order\n   * @returns {Promise<Readonly<Order>>}\n   */\n  [OrderStatus.PENDING]: async order => {\n    try {\n      /**@type {Order} */\n      const processedOrder = await processPendingOrder(order)\n\n      if (processedOrder.autoCheckout()) {\n        runOrderWorkflow(\n          processedOrder.update({ OrderStatus: OrderStatus.APPROVED }, false)\n        )\n      }\n    } catch (e) {\n      console.error(e)\n    }\n    return order\n  },\n\n  /**\n   * If payment is authorized, check inventory.\n   * This kicks off the rest of the workflow,\n   * which is controlled by port event flow.\n   * @param {Order} order\n   * @returns {Promise<Readonly<Order>>}\n   */\n  [OrderStatus.APPROVED]: async order => {\n    console.log('typeof order', typeof order)\n    try {\n      if (/approved/i.test(order.paymentStatus)) {\n        return order.pickOrder(orderPicked)\n      }\n      await order.emit('PayAuthFail', 'Payment authorization problem')\n      return order\n    } catch (error) {\n      console.log({ error })\n      handleError(error, order, OrderStatus.APPROVED)\n    }\n    return order\n  },\n\n  /**\n   * Useful if we need to restart tracking.\n   * @param {Order} order\n   * @returns {Promise<Readonly<Order>>}\n   */\n  [OrderStatus.SHIPPING]: async order => {\n    try {\n      order.trackShipment(trackingUpdate)\n      console.debug({ func: OrderStatus.SHIPPING, order })\n      await (await order.update({ orderStatus: OrderStatus.SHIPPING })).emit(\n        'orderPicked'\n      )\n    } catch (error) {\n      handleError(error, order, OrderStatus.SHIPPING)\n    }\n    return order\n  },\n\n  /**\n   * Start cancellation process.\n   * @param {Order} order\n   * @returns {Promise<Readonly<Order>>}\n   */\n  [OrderStatus.CANCELED]: async order => {\n    try {\n      console.debug({\n        func: OrderStatus.CANCELED,\n        desc: 'order canceled, calling undo',\n        orderNo: order.orderNo\n      })\n      return order.undo()\n    } catch (error) {\n      handleError(error, order, OrderStatus.CANCELED)\n    }\n    return order\n  },\n  /**\n   *\n   * @param {Order} order\n   * @returns {Promise<Readonly<Order>>}\n   */\n  [OrderStatus.COMPLETE]: async order => {\n    // send route to questionnaire, perform analysis, schedule follow-up\n    console.log('customer sentiment analysis, customer care, sales analysis')\n    return order\n  }\n}\n\n/**\n * Call order service workflow - controlled by status\n * @param {Order} order\n * @returns {Promise<Readonly<Order>>}\n */\nexport async function runOrderWorkflow (order) {\n  return OrderActions[order.orderStatus](order)\n}\n\n/**\n * Called on create, update, delete of model instance.\n * @param {{model:Promise<ReadOnly<Order>>}}\n */\nexport async function handleOrderEvent ({ model: order, eventType, changes }) {\n  if (changes?.orderStatus || eventType === 'CREATE') {\n    // console.debug({ fn: handleOrderEvent.name, order })\n    return runOrderWorkflow(order)\n  }\n}\n\n/**\n * Require a signature for orders $1000 and up\n * @param {*} input\n * @param {*} orderTotal\n */\nfunction needsSignature (input, orderTotal) {\n  return typeof input === 'boolean' ? input : orderTotal > 999.99\n}\n\n/** format and classify log entries */\nfunction logMessage (message, type) {\n  const msg = typeof message === 'string' ? message : JSON.stringify(message)\n\n  return {\n    desc: msg.substring(0, 140),\n    type,\n    time: Date.now(),\n    toJSON () {\n      return {\n        desc: this.desc,\n        type,\n        time: new Date(this.time).toUTCString()\n      }\n    }\n  }\n}\n\n/**\n * Returns factory function for the Order model.\n * @type {import('../domain/index.js').modelSpecFactoryFn}\n * @param {*} dependencies - inject dependencies\n */\nexport function makeOrderFactory (dependencies) {\n  return async function createOrder ({\n    orderItems,\n    email = null,\n    lastName = null,\n    firstName = null,\n    customerId = null,\n    billingAddress = null,\n    shippingAddress = null,\n    creditCardNumber = null,\n    shippingPriority = null,\n    autoCheckout = false,\n    saveShippingDetails = false,\n    requireSignature,\n    fibonacci = 10\n  }) {\n    const total = calcTotal(orderItems)\n    const signatureRequired = needsSignature(requireSignature, total)\n    const order = {\n      email,\n      lastName,\n      firstName,\n      customerId,\n      orderItems,\n      creditCardNumber,\n      billingAddress,\n      shippingAddress,\n      signatureRequired,\n      saveShippingDetails,\n      shippingPriority,\n      fibonacci,\n      result: 0,\n      time: 0,\n      estimatedArrival: null,\n      log: [logMessage('order created')],\n      [orderTotal]: total,\n      [orderStatus]: OrderStatus.PENDING,\n      [orderNo]: dependencies.uuid(),\n      desc: 'new order 25',\n      /**\n       * Has payment for the order been authorized?\n       */\n      paymentAccepted () {\n        return true\n      },\n      /**\n       * Proceed to checkout automatically or wait for approval?\n       */\n      autoCheckout () {\n        return autoCheckout\n      },\n      totalItems () {\n        return itemCount(this.orderItems)\n      },\n      total () {\n        return calcTotal(this.orderItems)\n      },\n      addItem (item) {\n        if (checkItem(item)) {\n          this.orderItems.push(item)\n          return true\n        }\n        return false\n      },\n      logEvent (message, type = 'info') {\n        this.log.push(logMessage(message, type))\n      },\n      logError (message) {\n        this.logEvent(message, 'error')\n      },\n      logUndo (message) {\n        this.logEvent(message, 'undo')\n      },\n      logStateChange (message) {\n        this.logEvent(message, 'stateChange')\n      },\n      /**\n       *\n       * @param {viewLog} options\n       * @returns {logMessageFn[]|logMessageFn}\n       */\n      readLog ({ index = null, type = null }) {\n        const indx = parseInt(index)\n        if (indx < this.log.length && indx !== NaN) return this.log[indx]\n        if (type === 'first') return this.log[0]\n        if (type === 'last') return this.log[this.log.length - 1]\n        if (type === 'lastStateChange')\n          return this.log[this.log.lastIndexOf({ type: 'stateChange' })]\n        if (type === 'stateChanges')\n          return this.log.filter(l => l.type === 'stateChange')\n        if (type === 'error') return this.log.filter(l => l.type === 'error')\n        if (type === 'undo') return this.log.filter(l => l.type === 'undo')\n        return this.log\n      }\n    }\n\n    return Object.freeze(order)\n  }\n}\n\n/**\n * Called as command to approve/submit order.\n * @param {Order} order\n */\nexport async function approve (order) {\n  const approvedOrder = await order.update({\n    orderStatus: OrderStatus.APPROVED\n  })\n  console.debug({ approvedOrder })\n  //approvedOrder.logStateChange(OrderStatus.APPROVED)\n  return runOrderWorkflow(approvedOrder)\n}\n\n/**\n * Called as command to cancel order.\n * @param {Order} order\n */\nexport async function cancel (order) {\n  const canceledOrder = await order.update({\n    orderStatus: OrderStatus.CANCELED\n  })\n  canceledOrder.logStateChange(OrderStatus.CANCELED)\n  return runOrderWorkflow(canceledOrder)\n}\n\n/**\n * Alias of `approve`\n * @param {Order} order\n * @returns\n */\nexport async function checkout (order) {\n  return approve(order)\n}\n\n/**\n *\n * @param {{model:Order}} param0\n */\nexport function errorCallback ({ port, model: order, error }) {\n  const errMsg = { error, port, error }\n  console.error(errorCallback.name, errMsg)\n  order.logEvent(errMsg)\n  order.emit(errorCallback.name, errMsg)\n  return order.undo()\n}\n\n/**\n *\n * @param {{model:Order}} param0\n */\nexport function timeoutCallback ({ port, ports, adapterFn, model: order }) {\n  console.error('timeout...', port)\n  //order.logError(timeoutCallback.name, 'timeout')\n  order.emit(timeoutCallback.name, errMsg)\n}\n\n/**\n * @type {undoFunction}\n * Start process to return canceled order items to inventory.\n * Do not call `runOrderWorkflow` - it is already running (in\n * reverse) if we get here.\n */\nexport async function returnInventory (order) {\n  console.log(returnInventory.name)\n  order.logEvent(returnInventory.name, 'timeout')\n  order.emit(returnInventory.name, errMsg)\n  return order.update({ orderStatus: OrderStatus.CANCELED })\n}\n\n/**\n * @type {undoFunction}\n * Start process for the shipper to pick the items to return.\n * Do not call `runOrderWorkflow` - it is already running (in\n * reverse) if we get here.\n */\nexport async function returnShipment (order) {\n  console.log(returnShipment.name)\n  order.logUndo(returnShipment.name)\n  return order.update({ orderStatus: OrderStatus.CANCELED })\n}\n\nexport function accountOrder (req, res) {}\n1\n/**\n * @type {undoFunction}\n * Start process to return canceled order items to inventory.\n * Do not call `runOrderWorkflow` - it is already running (in\n * reverse) if we get here.\n */\nexport async function returnDelivery (order) {\n  console.log(returnDelivery.name)\n  return order.update({ orderStatus: OrderStatus.CANCELED })\n}\n\n/**\n * @type {undoFunction}\n */\nexport async function cancelPayment (order) {\n  console.log(cancelPayment.name)\n  return order.update({ orderStatus: OrderStatus.CANCELED })\n}\n","'use strict'\n\nimport {\n  requireProperties,\n  freezeProperties,\n  hashPasswords,\n  validateProperties\n} from './mixins'\n\nexport function userFactory ({ uuid }) {\n  return async ({\n    userName,\n    password,\n    customerId,\n    firstName,\n    lastName,\n    phone,\n    email,\n    fibonacci\n  } = {}) =>\n    Object.freeze({\n      userId: uuid(),\n      password,\n      userName,\n      customerId,\n      firstName,\n      lastName,\n      phone,\n      email,\n      fibonacci\n    })\n}\n\nexport const userMixins = [\n  requireProperties('userName', 'password', 'firstName'),\n  freezeProperties('userId', 'userName'),\n  hashPasswords('password'),\n  validateProperties([\n    {\n      propKey: 'email',\n      regex: 'email',\n      unique: { encrypted: true }\n    },\n    {\n      propKey: 'userName',\n      unique: { encrypted: false }\n    }\n  ])\n]\n","'use strict'\n\nimport crypto from 'crypto'\nimport { nanoid } from 'nanoid'\n\nexport function compose (...funcs) {\n  return function (initVal) {\n    return funcs.reduceRight((val, func) => func(val), initVal)\n  }\n}\n\nexport function composeAsync (...funcs) {\n  return function (initVal) {\n    return funcs.reduceRight(\n      (val, func) => val.then(func),\n      Promise.resolve(initVal)\n    )\n  }\n}\n\n/**\n * @callback pipeFn\n * @param {object} obj - the object to compose\n * @returns {object} - the composed object\n */\n\n/**\n * @param {pipeFn} func\n */\nexport const asyncPipe = (...func) => obj =>\n  func.reduce((o, f) => o.then(f), Promise.resolve(obj))\n\nconst passwd = process.env.ENCRYPTION_PWD\nconst algo = 'aes-192-cbc'\nconst key = crypto.scryptSync(String(passwd), 'salt', 24)\nconst iv = Buffer.alloc(16, 0)\n\nexport function encrypt (text) {\n  const cipher = crypto.createCipheriv(algo, key, iv)\n  let encrypted = cipher.update(text, 'utf8', 'hex')\n  encrypted += cipher.final('hex')\n  return encrypted\n}\n\nexport function decrypt (cipherText) {\n  console.log('decrypt(%s)', cipherText)\n  const decipher = crypto.createDecipheriv(algo, key, iv)\n  let decrypted = decipher.update(cipherText, 'hex', 'utf8')\n  decrypted += decipher.final('utf8')\n  return decrypted\n}\n\nexport function hash (data) {\n  return crypto\n    .createHash('sha1')\n    .update(data)\n    .digest('hex')\n}\n\nexport function uuid () {\n  // return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n  //   (c ^ (crypto.randomBytes(16)[0] & (15 >> (c / 4)))).toString(16)\n  // );\n  return nanoid()\n}\n\nexport function makeArray (v) {\n  return Array.isArray(v) ? v : [v]\n}\n\nexport function makeObject (prop) {\n  if (Array.isArray(prop)) {\n    return prop.reduce((p, c) => ({ ...p, ...c }))\n  }\n  return prop\n}\n\n/**\n *\n * @param {Promise<{\n * ok:()=>any,\n *\n * }} promise\n * @returns\n */\nexport function async (promise) {\n  return promise\n    .then(result => ({\n      ok: true,\n      object: result,\n      asObject: () => makeObject(result),\n      asArray: () => makeArray(result)\n    }))\n    .catch(error => {\n      console.error(error)\n      return Promise.resolve({ ok: false, error })\n    })\n}\n","\"use strict\";\n\nimport { Event } from \"./services/event-service\";\n\nexport class EventDispatcher {\n  constructor(adapter = Event) {\n    this.adapter = adapter;\n    this.subscriptions = new Map();\n  }\n\n  registerCallback(topic, callback) {\n    if (this.subscriptions.has(topic)) {\n      this.subscriptions.get(topic).push(callback);\n      return;\n    }\n    this.subscriptions.set(topic, [callback]);\n  }\n\n  async emitEvent(topic, message, method = \"notify\") {\n    await this.adapter[method](topic, message);\n  }\n\n  async init(method = \"listen\") {\n    function emitEvent(topic, message) {\n      this.emitEvent(topic, message);\n    }\n\n    // this.emitEvent(/Channel/, \"remoteRestart\");\n    await this.adapter[method](\n      /Channel/,\n      function ({ topic, message }) {\n        if (this.subscriptions.has(topic)) {\n          this.subscriptions\n            .get(topic)\n            .forEach(callback =>\n              callback({ message, emitEvent: emitEvent.bind(this) })\n            );\n        }\n      }.bind(this)\n    );\n  }\n}\n","\"use strict\";\n\nimport { EventDispatcher } from \"./event-dispatcher\";\nimport { uuid } from \"./domain/utils\";\n\nexport const Registry = {\n  eventNames: {\n    shipOrder: \"orderShipped\",\n    trackShipment: \"outForDelivery\",\n    verifyDelivery: \"deliveryVerified\",\n  },\n\n  sendEvent({ emitEvent, topic, eventData, eventSource, eventName }) {\n    console.log(\"Sending event...\");\n    console.log({ emitEvent, topic, eventData, eventSource, eventName });\n    setTimeout(async () => {\n      await emitEvent(\n        topic,\n        JSON.stringify({\n          eventData,\n          eventName,\n          eventTime: new Date().toUTCString(),\n          eventType: \"commandResponse\",\n          eventSource: eventSource,\n        })\n      );\n    }, 5000);\n  },\n\n  generateShippingEventData(event, externalId) {\n    const trackingId = uuid();\n    const shipmentId = trackingId;\n    const proofOfDelivery = `http://shipping.service.com?proof=${trackingId}`;\n    const eventData = { externalId };\n    if (event.eventName === \"shipOrder\") {\n      return { ...eventData, shipmentId };\n    }\n    if (event.eventName === \"trackShipment\") {\n      return { ...eventData, trackingId, trackingStatus: \"outForDelivery\" };\n    }\n    if (event.eventName === \"verifyDelivery\") {\n      return { ...eventData, proofOfDelivery };\n    }\n  },\n\n  generateShippingMessage(emitEvent, event, externalId) {\n    return {\n      emitEvent,\n      topic: event.eventData.commandResp,\n      eventData: this.generateShippingEventData(event, externalId),\n      eventName: this.eventNames[event.eventName],\n      eventSource: \"shippingService\",\n    };\n  },\n\n  inventoryCallbackFactory() {\n    function inventoryCallback({ message, emitEvent }) {\n      const event = JSON.parse(message);\n      const warehouseAddress = /*null;*/ \"1234 warehouse dr, dock 2\";\n      const externalId = event.eventData.commandArgs.externalId;\n      const eventName = /*'outOfStock';*/ \"orderPicked\";\n      this.sendEvent({\n        emitEvent,\n        topic: event.eventData.replyChannel,\n        eventName,\n        eventData: { warehouse_addr: warehouseAddress, externalId },\n        eventSource: \"inventoryService\",\n      });\n    }\n    return inventoryCallback.bind(this);\n  },\n\n  shippingCallbackFactory() {\n    function shippingCallback({ message, emitEvent }) {\n      const event = JSON.parse(message);\n      const externalId = event.eventData.commandArgs.externalId;\n      const _message = this.generateShippingMessage(\n        emitEvent,\n        event,\n        externalId\n      );\n      this.sendEvent(_message);\n\n      if (event.eventName === \"trackShipment\") {\n        const eventData = {\n          ..._message.eventData,\n          trackingStatus: \"orderDelivered\",\n        };\n        setTimeout(\n          () =>\n            this.sendEvent({\n              ..._message,\n              eventData,\n              eventName: \"orderDelivered\",\n            }),\n          7000\n        );\n      }\n    }\n    return shippingCallback.bind(this);\n  },\n};\n\nconst dispatcher = new EventDispatcher();\n\ndispatcher.registerCallback(\n  \"inventoryChannel\",\n  Registry.inventoryCallbackFactory()\n);\n\ndispatcher.registerCallback(\n  \"shippingChannel\",\n  Registry.shippingCallbackFactory()\n);\n\nexport default dispatcher;\n","\"use strict\";\n\nexport const Address = {\n  /**\n   *\n   * @param {string} address US street address\n   */\n  async validateAddress(address) {\n    console.log(\"test validating address...\");\n\n    if (!address) {\n      throw new Error(\"no address provided\");\n    }\n\n    return address;\n  },\n\n};\n","\"use strict\";\n\nimport { EventDispatcher } from \"../../src/event-dispatcher\";\nimport { Registry } from \"../../src/service-registry\";\n\nconst shippingChannel = \"shippingChannel\";\nconst inventoryChannel = \"inventoryChannel\";\n\nconst callbacks = [];\nconst responses = [];\nconst topics = {\n  [shippingChannel]: /shipping/,\n  [inventoryChannel]: /inventory/,\n};\n\nexport function handleEvents(req, res) {\n  const message = JSON.stringify(req.body);\n  const topicName = Object.keys(topics).find(k => topics[k].test(message));\n  if (topicName) {\n    console.log({\n      func: handleEvents.name,\n      msg: \"found topic\",\n      topicName,\n      message,\n      cb: callbacks,\n    });\n\n    callbacks.forEach(callback => {\n      console.log({ name: callback.name, code: callback.toString() });\n      callback({ topicName, message });\n    });\n    console.log(responses);\n    responses.reduceRight(response => res.send(response), \"response\");\n  }\n}\n\nconst Event = {\n  topics: /Channel/,\n  listening: false,\n\n  listen(topic, callback) {\n    callbacks.push(callback);\n  },\n\n  notify(topic, message) {\n    responses.push(message);\n  },\n};\n\nconst dispatcher = new EventDispatcher(Event);\n\ndispatcher.registerCallback(\n  inventoryChannel,\n  Registry.inventoryCallbackFactory()\n);\n\ndispatcher.registerCallback(\n  shippingChannel,\n  Registry.shippingCallbackFactory()\n);\n\ndispatcher.init();\n","\"use strict\";\n\nimport { Event } from \"../../src/services/event-service\";\n\nfunction sendEvent({ eventData, eventName }) {\n  setTimeout(async () => {\n    await Event.notify(\n      \"orderChannel\",\n      JSON.stringify({\n        eventData,\n        eventName,\n        eventType: \"CommandResponse\",\n        eventTime: new Date().toUTCString(),\n        eventSource: \"Inventory\",\n      })\n    );\n  }, 5000);\n}\n\nexport const Inventory = {\n  async pickOrder({ externalId, lineItems }) {\n    console.log(\"inventory items\");\n    console.log(lineItems);\n    const pickupAddress = \"1234 warehouse dr, dock2\";\n    sendEvent({\n      eventName: \"orderPicked\",\n      eventData: { pickupAddress, externalId },\n    });\n  },\n};\n","\"use strict\";\n\n/**\n * @callback authorizePaymentType\n * @param {string} id\n * @param {number} amount\n * @param {string} source_id\n * @param {string} customer_id\n * @param {boolean} [autocomplete]\n * @returns {Promise<string>}\n */\n\n/**\n * @typedef PaymentService\n * @property {authorizePaymentType} authorizePayment\n * @property {function()} completePayment\n * @property {function()} refundPayment\n */\n\n// import { Client, Environment, ApiError } from \"square\";\n\n// const client = new Client({\n//   environment: Environment.Sandbox,\n//   accessToken: process.env.SQUARE_ACCESS_TOKEN,\n// });\n\nexport const Payment = {\n  /**\n   * @type {authorizePaymentType}\n   * @param {*} id\n   * @param {*} amount\n   * @param {*} source_id\n   * @param {*} customer_id\n   * @param {*} autocomplete\n   * @param {*} currency\n   */\n  async authorizePayment(\n    id,\n    amount,\n    source_id,\n    customer_id,\n    autocomplete = false,\n    currency = \"USD\"\n  ) {\n    console.log(\"mock payment service called\");\n    const payload = {\n      idempotency_key: id,\n      amount_money: {\n        amount,\n        currency,\n      },\n      source_id,\n      autocomplete,\n      customer_id,\n      location_id: \"XK3DBG77NJBFX\",\n      reference_id: \"123456\",\n      note: \"Brief description\",\n      app_fee_money: {\n        amount: 10,\n        currency: \"USD\",\n      },\n    };\n    /*\n    const bodyAmountMoney = {};\n    bodyAmountMoney.amount = 200;\n    bodyAmountMoney.currency = \"USD\";\n\n    const bodyTipMoney = {};\n    bodyTipMoney.amount = 198;\n    bodyTipMoney.currency = \"CHF\";\n\n    const bodyAppFeeMoney = {};\n    bodyAppFeeMoney.amount = 10;\n    bodyAppFeeMoney.currency = \"USD\";\n\n    const body = {\n      sourceId: \"ccof:uIbfJXhXETSP197M3GB\",\n      idempotencyKey: \"4935a656-a929-4792-b97c-8848be85c27c\",\n      amountMoney: bodyAmountMoney,\n    };\n\n    body.tipMoney = bodyTipMoney;\n    body.appFeeMoney = bodyAppFeeMoney;\n    body.delayDuration = \"delay_duration6\";\n    body.autocomplete = true;\n    body.orderId = \"order_id0\";\n    body.customerId = \"VDKXEEKPJN48QDG3BGGFAK05P8\";\n    body.locationId = \"XK3DBG77NJBFX\";\n    body.referenceId = \"123456\";\n    body.note = \"Brief description\";\n\n    // try {\n    //   const {\n    //     result,\n    //     ...httpResponse\n    //   } = await client.paymentsApi.createPayment(body);\n    //   // Get more response info...\n    //   // const { statusCode, headers } = httpResponse;\n    // } catch (error) {\n    //   if (error instanceof ApiError) {\n    //     const errors = error.result;\n    //     // const { statusCode, headers } = error;\n    //   }\n    // }\n    */\n    return \"1234\";\n  },\n\n  /*\n  const response ={\n  \"payment\": {\n    \"id\": \"GQTFp1ZlXdpoW4o6eGiZhbjosiDFf\",\n    \"created_at\": \"2019-07-10T13:23:49.154Z\",\n    \"updated_at\": \"2019-07-10T13:23:49.446Z\",\n    \"amount_money\": {\n      \"amount\": 200,\n      \"currency\": \"USD\"\n    },\n    \"app_fee_money\": {\n      \"amount\": 10,\n      \"currency\": \"USD\"\n    },\n    \"total_money\": {\n      \"amount\": 200,\n      \"currency\": \"USD\"\n    },\n    \"status\": \"COMPLETED\",\n    \"source_type\": \"CARD\",\n    \"card_details\": {\n      \"status\": \"CAPTURED\",\n      \"card\": {\n        \"card_brand\": \"VISA\",\n        \"last_4\": \"1111\",\n        \"exp_month\": 7,\n        \"exp_year\": 2026,\n        \"fingerprint\": \"sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw\",\n        \"card_type\": \"DEBIT\",\n        \"prepaid_type\": \"PREPAID\",\n        \"bin\": \"411111\"\n      },\n      \"entry_method\": \"ON_FILE\",\n      \"cvv_status\": \"CVV_ACCEPTED\",\n      \"avs_status\": \"AVS_ACCEPTED\",\n      \"auth_result_code\": \"nsAyY2\",\n      \"statement_description\": \"SQ *MY MERCHANT\"\n    },\n    \"location_id\": \"XTI0H92143A39\",\n    \"order_id\": \"m2Hr8Hk8A3CTyQQ1k4ynExg92tO3\",\n    \"reference_id\": \"123456\",\n    \"note\": \"Brief description\",\n    \"customer_id\": \"RDX9Z4XTIZR7MRZJUXNY9HUK6I\",\n    \"receipt_number\": \"GQTF\",\n    \"receipt_url\": \"https://squareup.com/receipt/preview/GQTFp1ZlXdpoW4o6eGiZhbjosiDFf\"\n  }\n}\n  /*\n{\n  \"errors\": [\n    {\n      \"code\": \"VALUE_EMPTY\",\n      \"detail\": \"Field must not be blank\",\n      \"field\": \"source_id\",\n      \"category\": \"INVALID_REQUEST_ERROR\"\n    },\n    {\n      \"code\": \"VALUE_EMPTY\",\n      \"detail\": \"Field must not be blank\",\n      \"field\": \"idempotency_key\",\n      \"category\": \"INVALID_REQUEST_ERROR\"\n    },\n    {\n      \"code\": \"MISSING_REQUIRED_PARAMETER\",\n      \"detail\": \"Field must be set\",\n      \"field\": \"amount_money\",\n      \"category\": \"INVALID_REQUEST_ERROR\"\n    }\n  ]\n}\n  */\n\n  async completePayment(model) {\n    console.log(\"REAL completing payment: %s\", model.orderNo);\n    return \"1234\";\n  },\n\n  async refundPayment(model) {\n    console.log(\"REAL refunding payment: %s\", model.orderNo);\n  },\n};\n","\"use strict\";\n\n/**\n * @typedef {import('../adapters/event-adapter').EventMessage} EventMessage\n */\n\n/**\n * @typedef {import('../adapters/event-adapter').CommandEvent} CommandEvent\n */\n\n/**\n * @callback shipOrder\n * @param {string} shipTo\n * @param {string} shipFrom\n * @param {string} lineItems\n * @param {string} signature\n * @param {string} externalId\n * @param {string} requester\n * @param {string} respondOn\n * @returns {EventMessage}\n */\n\n/**\n * @callback trackShipment\n * @param {string} shipmentId\n * @param {string} externalId\n * @param {string} requester\n * @param {string} respondOn\n * @returns {EventMessage}\n */\n\n/**\n * @typedef {string} functionName\n */\n\n/**\n * @typedef {Object} shippingService formats and parses shipping event messages\n * @property {string} serviceName - programmatic service name in eventSource/Target\n * @property {string} topic - event topic \"shippingChannel\" when sending messasges\n * @property {shipOrder} shipOrder - format event message requesting shipping label and pickup of order\n * @property {trackShipment} trackShipment - report on location/status of parcel\n * @property {function():EventMessage} verifyDelivery - ensure customer recieved parcel\n * @property {function():EventMessage} returnShipment - return to sender if refunding\n * @property {function(functionName,EventMessage):{[key]:string}} getPayload - extract payload\n */\n\nfunction createEventMessage({ requester, service, type, name, id, data }) {\n  return {\n    eventSource: requester,\n    eventTarget: service,\n    eventType: type,\n    eventName: name,\n    eventTime: new Date().getTime(),\n    eventUuid: id,\n    eventData: data,\n  };\n}\n\nfunction createCommandEvent(name, topic, args) {\n  return {\n    commandName: name,\n    commandResp: topic,\n    commandArgs: { ...args },\n  };\n}\n\n/**\n * Shipping service events\n * @type {shippingService}\n */\nexport const Shipping = {\n  serviceName: \"shippingService\",\n  topic: \"shippingChannel\",\n\n  /**\n   *\n   * @param {*} param0\n   * @returns {shipMessage}\n   */\n  shipOrder({\n    shipTo,\n    shipFrom,\n    lineItems,\n    signature,\n    externalId,\n    requester,\n    respondOn,\n  }) {\n    return createEventMessage({\n      requester,\n      service: this.serviceName,\n      type: \"command\",\n      name: this.shipOrder.name,\n      id: externalId,\n      data: createCommandEvent(this.shipOrder.name, respondOn, {\n        shipTo,\n        shipFrom,\n        lineItems,\n        signature,\n        externalId,\n      }),\n    });\n  },\n\n  /**\n   *\n   * @param {*} param0\n   * @returns {EventMessage}\n   */\n  trackShipment({ externalId, shipmentId, trackingId, requester, respondOn }) {\n    return createEventMessage({\n      requester,\n      service: this.serviceName,\n      type: \"command\",\n      name: this.trackShipment.name,\n      id: externalId,\n      data: createCommandEvent(this.trackShipment.name, respondOn, {\n        externalId,\n        shipmentId,\n        trackingId,\n      }),\n    });\n  },\n\n  /**\n   *\n   * @param {*} param0\n   * @returns {EventMessage}\n   */\n  verifyDelivery({ requester, respondOn, trackingId, externalId }) {\n    return createEventMessage({\n      requester,\n      service: this.serviceName,\n      type: \"command\",\n      name: this.verifyDelivery.name,\n      id: externalId,\n      data: createCommandEvent(this.verifyDelivery.name, respondOn, {\n        externalId,\n        trackingId,\n      }),\n    });\n  },\n\n  returnShipment({ requester, respondOn, shipmentId, externalId }) {\n    return createEventMessage({\n      requester,\n      service: this.serviceName,\n      type: \"command\",\n      id: externalId,\n      name: this.returnShipment.name,\n      data: createCommandEvent(this.returnShipment, respondOn, {\n        shipmentId,\n        externalId,\n      }),\n    });\n  },\n\n  getPayload(func, event) {\n    const payloads = {\n      [this.shipOrder.name]: {\n        shipmentId: event.eventData.shipmentId,\n      },\n      [this.trackShipment.name]: {\n        trackingId: event.eventData.trackingId,\n        trackingStatus: event.eventData.trackingStatus,\n      },\n      [this.verifyDelivery.name]: {\n        proofOfDelivery: event.eventData.proofOfDelivery,\n      },\n    };\n    return payloads[func];\n  },\n\n  getProperty(event, key) {\n    return event.eventData[key];\n  },\n};\n","import crypto from 'crypto'\nimport { urlAlphabet } from './url-alphabet/index.js'\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nlet fillPool = bytes => {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    crypto.randomFillSync(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nlet random = bytes => {\n  fillPool((bytes -= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  fillPool((size -= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport { urlAlphabet }\n"],"names":["Inventory","modelName","endpoint","dependencies","factory","makeInventoryFactory","mixins","requireProperties","validateProperties","propKey","typeof","maxnum","values","categories","assetTypes","isValid","_obj","prop","every","p","properties","freezeProperties","relations","orders","type","foreignKey","desc","Order","makeOrderFactory","uuid","nanoid","requiredForGuest","requiredForApproval","requiredForCompletion","freezeOnApproval","freezeOnCompletion","updateProperties","update","recalcTotal","updateSignature","Object","OrderStatus","statusChangeValid","orderTotalValid","regex","validate","validateModel","onDelete","readyToDelete","eventHandlers","handleOrderEvent","ports","listen","service","timeout","notify","save","find","validateAddress","keys","producesEvent","disabled","authorizePayment","consumesEvent","undo","cancelPayment","pickOrder","returnInventory","circuitBreaker","portTimeout_pickOrder_order","callVolume","errorRate","intervalMs","shipOrder","callback","orderShipped","returnShipment","portTimeout_shipOrder_order","portRetryFailed_order","fallbackFn","cancel","default","trackShipment","verifyDelivery","returnDelivery","completePayment","paymentCompleted","refundPayment","cancelShipment","customer","inventory","arrayKey","commands","decrypt","command","acl","approve","runFibonacci","model","start","Date","now","param","parseFloat","fibonacci","result","x","Number","isNaN","time","routes","get","req","res","put","accountOrder","send","JSON","stringify","account","status","serializers","on","key","value","enabled","User","userFactory","userMixins","makeAdapters","adapters","services","map","port","e","console","warn","message","reduce","c","checkPayload","options","payload","name","Error","error","Array","isArray","k","then","latest","models","modelSpecs","spec","missing","filter","length","entries","validateSpec","concat","GlobalMixins","bindAdapters","makeModel","category","price","discount","sku","purchaseOrder","vendor","inStock","assetType","quantity","freeze","prevmodel","Symbol","validations","mixinType","pre","post","containsUpdates","changes","event","changeList","util","fn","input","parse","updates","v","sort","a","b","order","apply","updated","output","enableEvent","onUpdate","onCreate","onLoad","enableValidation","onCreateAndUpdate","onAll","never","addValidation","config","some","parseKeys","o","propKeys","flat","RegExp","test","obj","mutations","includes","preventUpdates","this","requireProps","hashPasswords","hash","RegEx","email","ipv4Address","ipv6Address","phone","creditCard","ssn","expr","val","Validator","tests","propVal","maxlen","unique","compareVal","encrypted","encrypt","listSync","evaluateUniqueness","invalid","updaters","u","updateProps","encryptProperties","PENDING","APPROVED","SHIPPING","COMPLETE","CANCELED","checkItem","orderItem","itemId","calcTotal","orderItems","items","checkItems","total","item","qty","itemCount","orderStatus","customerId","invalidStatusChange","from","to","invalidStatusChanges","i","orderTotal","signatureRequired","handleError","func","errMsg","orderNo","emit","shipmentPayload","shipmentId","orderPicked","addressValidated","addressPayload","shippingAddress","paymentAuthorized","paymentStatus","verifyAddress","debug","verifyPayment","authorizeOrder","paymentDeclined","insufficient","inv","id","log","custInfo","firstName","info","saveShippingDetails","processPendingOrder","asyncPipe","getCustomerOrder","verifyInventory","OrderActions","processedOrder","autoCheckout","runOrderWorkflow","trackingUpdate","eventType","logMessage","substring","toJSON","toUTCString","lastName","billingAddress","creditCardNumber","shippingPriority","requireSignature","estimatedArrival","push","logEvent","index","indx","parseInt","NaN","lastIndexOf","l","approvedOrder","canceledOrder","logStateChange","logUndo","userName","password","userId","f","Promise","resolve","passwd","process","env","ENCRYPTION_PWD","algo","crypto","String","iv","Buffer","alloc","text","cipher","cipherText","decipher","data","digest","EventDispatcher","adapter","Event","subscriptions","Map","topic","has","set","method","emitEvent","forEach","bind","Registry","eventNames","sendEvent","eventData","eventSource","eventName","setTimeout","eventTime","generateShippingEventData","externalId","trackingId","proofOfDelivery","trackingStatus","generateShippingMessage","commandResp","inventoryCallbackFactory","commandArgs","replyChannel","warehouse_addr","shippingCallbackFactory","_message","dispatcher","registerCallback","Address","address","shippingChannel","inventoryChannel","callbacks","responses","topics","handleEvents","body","topicName","msg","cb","code","toString","reduceRight","response","listening","init","lineItems","pickupAddress","Payment","amount","source_id","customer_id","createEventMessage","requester","eventTarget","getTime","eventUuid","createCommandEvent","args","commandName","Shipping","serviceName","shipTo","shipFrom","signature","respondOn","getPayload","getProperty","pool","poolOffset","size","bytes","allocUnsafe"],"sourceRoot":""}