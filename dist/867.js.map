{"version":3,"sources":["webpack://microlib-example/./src/adapters/address-adapter.js","webpack://microlib-example/./src/adapters/event-adapter.js","webpack://microlib-example/./src/adapters/index.js","webpack://microlib-example/./src/adapters/inventory-adapter.js","webpack://microlib-example/./src/adapters/payment-adapter.js","webpack://microlib-example/./src/adapters/shipping-adapter.js","webpack://microlib-example/./src/services/event-service.js"],"names":["validateAddress","service","options","order","model","args","callback","decrypt","shippingAddress","update","console","error","func","name","subscriptions","Map","filterMatches","message","filter","regex","RegExp","result","test","debug","substring","concat","Subscription","id","topic","filters","once","unsubscribe","get","getId","getModel","getSubscriptions","entries","every","subscription","listen","Event","arg","has","set","listening","forEach","notify","JSON","parse","pickOrder","Promise","resolve","reject","orderNo","event","log","pickupAddress","eventData","warehouse_addr","newOrder","then","stringify","eventType","eventTime","Date","toUTCString","eventSource","replyChannel","commandName","commandArgs","lineItems","orderItems","externalId","reason","Error","authorizePayment","paymentAuthorization","paymentStatus","completePayment","confirmationCode","refundPayment","ORDER_SERVICE","ORDER_TOPIC","handleError","file","__filename","shipOrder","shipOrderCallback","callShipOrder","shipTo","shipFrom","signature","signatureRequired","requester","respondOn","payload","getPayload","updated","trackShipment","trackShipmentCallback","callTrackShipment","shipmentId","trackingStatus","verifyDelivery","verifyDeliveryCallback","callVerifyDelivery","trackingId","brokers","process","env","KAFKA_BROKERS","topics","KAFKA_TOPICS","groupId","KAFKA_GROUP_ID","pid","kafka","Kafka","clientId","split","consumer","producer","connect","subscribe","fromBeginning","run","eachMessage","value","toString","send","messages","disconnect"],"mappings":";;;;;;;;;;;;;;;;;;;AAAa;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;+CAbA,oJ;;;;;;;;;;;;;;;;;;AAcO,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;EACvC;IAAA,sEAAO,iBAAgBC,OAAhB;MAAA;;MAAA;QAAA;UAAA;YAAA;cAEIC,KAFJ,GAIDD,OAJC,CAEHE,KAFG,iCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;cAAA;cAAA;cAAA,OAO2BL,OAAO,CAACD,eAAR,CAC5BG,KAAK,CAACI,OAAN,GAAgBC,eADY,CAP3B;;YAAA;cAOGA,eAPH;cAAA;cAAA,OAUkBF,QAAQ,CAACJ,OAAD,EAAU;gBAAEM,eAAe,EAAfA;cAAF,CAAV,CAV1B;;YAAA;cAUGC,MAVH;cAAA,iCAWIA,MAXJ;;YAAA;cAAA;cAAA;cAaHC,OAAO,CAACC,KAAR,CAAc;gBAAEC,IAAI,EAAEZ,eAAe,CAACa,IAAxB;gBAA8BF,KAAK,aAAnC;gBAAqCT,OAAO,EAAPA;cAArC,CAAd;;YAbG;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AAgBD,C;;;;;;;;;;;;;;;;;;;;;;AChCY;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;+CA9CA,oJ;;;;;;;;;;;;;;;;;;AA+CA;AAEA;AACA;AACA;;AACA,IAAMY,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;EAC9B,OAAO,UAAUC,MAAV,EAAkB;IACvB,IAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAWF,MAAX,CAAd;IACA,IAAMG,MAAM,GAAGF,KAAK,CAACG,IAAN,CAAWL,OAAX,CAAf;IACA,IAAII,MAAJ,EACEX,OAAO,CAACa,KAAR,CAAc;MACZX,IAAI,EAAEI,aAAa,CAACH,IADR;MAEZK,MAAM,EAANA,MAFY;MAGZG,MAAM,EAANA,MAHY;MAIZJ,OAAO,EAAEA,OAAO,CAACO,SAAR,CAAkB,CAAlB,EAAqB,GAArB,EAA0BC,MAA1B,CAAiC,KAAjC;IAJG,CAAd;IAMF,OAAOJ,MAAP;EACD,CAXD;AAYD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMK,YAAY,GAAG,SAAfA,YAAe,OAAyD;EAAA,IAA7CC,EAA6C,QAA7CA,EAA6C;EAAA,IAAzCrB,QAAyC,QAAzCA,QAAyC;EAAA,IAA/BsB,KAA+B,QAA/BA,KAA+B;EAAA,IAAxBC,OAAwB,QAAxBA,OAAwB;EAAA,IAAfC,IAAe,QAAfA,IAAe;EAAA,IAAT1B,KAAS,QAATA,KAAS;EAC5E,OAAO;IACL;AACJ;AACA;IACI2B,WAJK,yBAIS;MACZjB,aAAa,CAACkB,GAAd,CAAkBJ,KAAlB,YAAgCD,EAAhC;IACD,CANI;IAQLM,KARK,mBAQG;MACN,OAAON,EAAP;IACD,CAVI;IAYLO,QAZK,sBAYM;MACT,OAAO9B,KAAP;IACD,CAdI;IAgBL+B,gBAhBK,8BAgBc;MACjB,0BAAWrB,aAAa,CAACsB,OAAd,EAAX;IACD,CAlBI;;IAoBL;AACJ;AACA;AACA;IACUlB,MAxBD,kBAwBQD,OAxBR,EAwBiB;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,KAChBY,OADgB;kBAAA;kBAAA;gBAAA;;gBAAA,KAGdA,OAAO,CAACQ,KAAR,CAAcrB,aAAa,CAACC,OAAD,CAA3B,CAHc;kBAAA;kBAAA;gBAAA;;gBAIhB,IAAIa,IAAJ,EAAU;kBACR;kBACA,KAAI,CAACC,WAAL;gBACD;;gBAPe;gBAAA,OAQVzB,QAAQ,CAAC;kBAAEW,OAAO,EAAPA,OAAF;kBAAWqB,YAAY,EAAE;gBAAzB,CAAD,CARE;;cAAA;gBAAA;;cAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAedhC,QAAQ,CAAC;kBAAEW,OAAO,EAAPA,OAAF;kBAAWqB,YAAY,EAAE;gBAAzB,CAAD,CAfM;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAgBrB;EAxCI,CAAP;AA0CD,CA3CD;AA6CA;AACA;AACA;AACA;AACA;;;AACO,SAASC,MAAT,GAAiC;EAAA,IAAjBtC,OAAiB,uEAAPuC,0DAAO;EACtC;IAAA,uEAAO,kBAAgBtC,OAAhB;MAAA;;MAAA;QAAA;UAAA;YAAA;cAEHE,KAFG,GAIDF,OAJC,CAEHE,KAFG,iCAIDF,OAJC,CAGHG,IAHG,MAGIoC,GAHJ;cAMCH,YAND,GAMgBZ,YAAY;gBAAGtB,KAAK,EAALA;cAAH,GAAaqC,GAAb,EAN5B;;cAAA,KAQD3B,aAAa,CAAC4B,GAAd,CAAkBD,GAAG,CAACb,KAAtB,CARC;gBAAA;gBAAA;cAAA;;cASHd,aAAa,CAACkB,GAAd,CAAkBS,GAAG,CAACb,KAAtB,EAA6Be,GAA7B,CAAiCF,GAAG,CAACd,EAArC,EAAyCW,YAAzC;cATG,kCAUIA,YAVJ;;YAAA;cAaLxB,aAAa,CAAC6B,GAAd,CAAkBF,GAAG,CAACb,KAAtB,EAA6B,IAAIb,GAAJ,GAAU4B,GAAV,CAAcF,GAAG,CAACd,EAAlB,EAAsBW,YAAtB,CAA7B;;cAEA,IAAI,CAACrC,OAAO,CAAC2C,SAAb,EAAwB;gBACtB3C,OAAO,CAACsC,MAAR,CAAe,SAAf;kBAAA,uEAA0B;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAAkBX,KAAlB,SAAkBA,KAAlB,EAAyBX,OAAzB,SAAyBA,OAAzB;;4BACxB,IAAIH,aAAa,CAAC4B,GAAd,CAAkBd,KAAlB,CAAJ,EAA8B;8BAC5Bd,aAAa,CAACkB,GAAd,CAAkBJ,KAAlB,EAAyBiB,OAAzB;gCAAA,uEAAiC,kBAAMP,YAAN;kCAAA;oCAAA;sCAAA;wCAAA;0CAAA;0CAAA,OACzBA,YAAY,CAACpB,MAAb,CAAoBD,OAApB,CADyB;;wCAAA;wCAAA;0CAAA;sCAAA;oCAAA;kCAAA;gCAAA,CAAjC;;gCAAA;kCAAA;gCAAA;8BAAA;4BAGD;;0BALuB;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAA1B;;kBAAA;oBAAA;kBAAA;gBAAA;cAOD;;cAvBI,kCAwBEqB,YAxBF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AA0BD;AAED;AACA;AACA;AACA;;AACO,SAASQ,MAAT,GAAiC;EAAA,IAAjB7C,OAAiB,uEAAPuC,0DAAO;EACtC;IAAA,uEAAO;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAkBpC,KAAlB,SAAkBA,KAAlB,oCAAyBC,IAAzB,MAAgCuB,KAAhC,kBAAuCX,OAAvC;cACLP,OAAO,CAACa,KAAR,CAAc,YAAd,EAA4B;gBAAEK,KAAK,EAALA,KAAF;gBAASX,OAAO,EAAE8B,IAAI,CAACC,KAAL,CAAW/B,OAAX;cAAlB,CAA5B;cADK;cAAA,OAEChB,OAAO,CAAC6C,MAAR,CAAelB,KAAf,EAAsBX,OAAtB,CAFD;;YAAA;cAAA,kCAGEb,KAHF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AAKD,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChLY;;AAEb;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,G;;;;;;;;;;;;;;;;;;;ACXa;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;+CAxCA,oJ;;;;;;;;;;;;;;;;;;AAyCO,SAAS6C,SAAT,CAAmBhD,OAAnB,EAA4B;EACjC,OAAO,UAAUC,OAAV,EAAmB;IACxB,IACSC,KADT,GAGID,OAHJ,CACEE,KADF;IAAA,mCAGIF,OAHJ,CAEEG,IAFF;IAAA,IAESC,SAFT;;IAKA,OAAO,IAAI4C,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;MAC5C;MACA,OAAOjD,KAAK,CACToC,MADI,CACG;QACNT,IAAI,EAAE,IADA;QAEN1B,KAAK,EAAED,KAFD;QAGNwB,EAAE,EAAExB,KAAK,CAACkD,OAHJ;QAINzB,KAAK,EAAE,cAJD;QAKNC,OAAO,EAAE,CAAC1B,KAAK,CAACkD,OAAP,EAAgB,aAAhB,EAA+B,gBAA/B,CALH;QAMN/C,QAAQ;UAAA,4EAAE;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAASW,OAAT,QAASA,OAAT;oBAAA;oBAEAqC,KAFA,GAEQP,IAAI,CAACC,KAAL,CAAW/B,OAAX,CAFR;oBAGNP,OAAO,CAAC6C,GAAR,CAAY,kBAAZ,EAAgCD,KAAhC;oBACME,aAJA,GAIgBF,KAAK,CAACG,SAAN,CAAgBC,cAJhC;oBAAA;oBAAA,OAKiBpD,SAAQ,CAACJ,OAAD,EAAU;sBAAEsD,aAAa,EAAbA;oBAAF,CAAV,CALzB;;kBAAA;oBAKAG,QALA;oBAMNR,OAAO,CAACQ,QAAD,CAAP,CANM,CAMa;;oBANb;oBAAA;;kBAAA;oBAAA;oBAAA;oBAQNP,MAAM,aAAN;;kBARM;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAF;;UAAA;YAAA;UAAA;;UAAA;QAAA;MANF,CADH,EAmBJQ,IAnBI,CAmBC,YAAM;QACV,OAAOzD,KAAK,CAAC2C,MAAN,CACL,kBADK,EAELC,IAAI,CAACc,SAAL,CAAe;UACbC,SAAS,EAAE,SADE;UAEbC,SAAS,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFE;UAGbC,WAAW,EAAE,cAHA;UAIbT,SAAS,EAAE;YACTU,YAAY,EAAE,cADL;YAETC,WAAW,EAAE,WAFJ;YAGTC,WAAW,EAAE;cACXC,SAAS,EAAEnE,KAAK,CAACoE,UADN;cAEXC,UAAU,EAAErE,KAAK,CAACkD;YAFP;UAHJ;QAJE,CAAf,CAFK,CAAP;MAgBD,CApCI,WAqCE,UAACoB,MAAD,EAAY;QACjB,MAAM,IAAIC,KAAJ,CAAUD,MAAV,CAAN;MACD,CAvCI,CAAP;IAwCD,CA1CM,CAAP;EA2CD,CAjDD;AAkDD,C;;;;;;;;;;;;;;;;;;;;;;;AC7FD;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;+CAXA,oJ;;;;;;;;;;;;;;;;;;AAYO,SAASE,gBAAT,CAA2B1E,OAA3B,EAAoC;EACzC;IAAA,sEAAO,iBAAgBC,OAAhB;MAAA;;MAAA;QAAA;UAAA;YAAA;cAEIC,KAFJ,GAIDD,OAJC,CAEHE,KAFG,iCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;cAAA;cAAA,OAM8BL,OAAO,CAAC0E,gBAAR,CACjCxE,KAAK,CAACkD,OAD2B,EAEjC,IAFiC,EAGjC,KAHiC,EAIjC,KAJiC,EAKjC,KALiC,CAN9B;;YAAA;cAMCuB,oBAND;cAaCC,aAbD,GAaiB,UAbjB;cAAA,iCAcEvE,QAAQ,CAACJ,OAAD,EAAU;gBAAE2E,aAAa,EAAbA;cAAF,CAAV,CAdV;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AAgBD;AAED;AACA;AACA;;AACO,SAASC,eAAT,CAA0B7E,OAA1B,EAAmC;EACxC;IAAA,uEAAO,kBAAgBC,OAAhB;MAAA;;MAAA;QAAA;UAAA;YAAA;cAEIC,KAFJ,GAIDD,OAJC,CAEHE,KAFG,kCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;cAAA;cAAA,OAK0BL,OAAO,CAAC6E,eAAR,CAAwB3E,KAAxB,CAL1B;;YAAA;cAKC4E,gBALD;cAAA;cAAA,OAMkBzE,QAAQ,CAACJ,OAAD,EAAU;gBAAE6E,gBAAgB,EAAhBA;cAAF,CAAV,CAN1B;;YAAA;cAMCpB,QAND;cAAA,kCAOEA,QAPF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AASD;AACD;AACA;AACA;;AACO,SAASqB,aAAT,CAAwB/E,OAAxB,EAAiC;EACtC;IAAA,uEAAO,kBAAgBC,OAAhB;MAAA;;MAAA;QAAA;UAAA;YAAA;cAEIC,KAFJ,GAIDD,OAJC,CAEHE,KAFG,kCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;cAAA;cAAA,OAKCL,OAAO,CAAC+E,aAAR,CAAsB7E,KAAtB,CALD;;YAAA;cAAA;cAAA,OAMkBG,QAAQ,CAACJ,OAAD,CAN1B;;YAAA;cAMCyD,QAND;cAAA,kCAOEA,QAPF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AASD,C;;;;;;;;;;;;;;;;;;;;;;;;AC3DY;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;+CApCA,oJ;;;;;;;;;;;;;;;;;;AAsCA,IAAMsB,aAAa,GAAG,cAAtB;AACA,IAAMC,WAAW,GAAG,cAApB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACxE,KAAD,EAAuC;EAAA,IAA/ByC,MAA+B,uEAAtB,IAAsB;EAAA,IAAhBxC,IAAgB,uEAAT,IAAS;EACzDF,OAAO,CAACC,KAAR,CAAc;IAAEyE,IAAI,EAAEC,UAAR;IAAoBzE,IAAI,EAAJA,IAApB;IAA0BD,KAAK,EAALA;EAA1B,CAAd;EACA,IAAIyC,MAAJ,EAAYA,MAAM,CAACzC,KAAD,CAAN;AACb,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAAS2E,SAAT,CAAmBrF,OAAnB,EAA4B;EACjC;IAAA,sEAAO,kBAAgBC,OAAhB;MAAA,oCAeIqF,iBAfJ,EAgCIC,aAhCJ;;MAAA;QAAA;UAAA;YAAA;cAgCIA,aAhCJ,6BAgCoB;gBACvB,OAAOrF,KAAK,CAAC2C,MAAN,CACL7C,OAAO,CAAC2B,KADH,EAELmB,IAAI,CAACc,SAAL,CACE5D,OAAO,CAACqF,SAAR,CAAkB;kBAChBG,MAAM,EAAEtF,KAAK,CAACI,OAAN,GAAgBC,eADR;kBAEhBkF,QAAQ,EAAEvF,KAAK,CAACqD,aAFA;kBAGhBc,SAAS,EAAEnE,KAAK,CAACoE,UAHD;kBAIhBoB,SAAS,EAAExF,KAAK,CAACyF,iBAJD;kBAKhBpB,UAAU,EAAErE,KAAK,CAACkD,OALF;kBAMhBwC,SAAS,EAAEZ,aANK;kBAOhBa,SAAS,EAAEZ;gBAPK,CAAlB,CADF,CAFK,CAAP;cAcD,CA/CI;;cAeIK,iBAfJ,+BAesBpC,OAftB,EAe+BC,MAf/B,EAeuC;gBAC1C;kBAAA,uEAAO;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAAkBnC,OAAlB,SAAkBA,OAAlB;4BAAA;4BAEGqC,KAFH,GAEWP,IAAI,CAACC,KAAL,CAAW/B,OAAX,CAFX;4BAGHP,OAAO,CAACa,KAAR,CAAc,oBAAd,EAAoC+B,KAApC;4BACMyC,OAJH,GAIa9F,OAAO,CAAC+F,UAAR,CAAmBV,SAAS,CAACzE,IAA7B,EAAmCyC,KAAnC,CAJb;4BAAA;4BAAA,OAKmBhD,QAAQ,CAACJ,OAAD,EAAU6F,OAAV,CAL3B;;0BAAA;4BAKGE,OALH;4BAMH9C,OAAO,CAAC8C,OAAD,CAAP;4BANG;4BAAA;;0BAAA;4BAAA;4BAAA;4BAQHd,WAAW,cAAQ/B,MAAR,EAAgBmC,iBAAiB,CAAC1E,IAAlC,CAAX;;0BARG;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAAP;;kBAAA;oBAAA;kBAAA;gBAAA;cAWD,CA3BI;;cAEIV,KAFJ,GAIDD,OAJC,CAEHE,KAFG,iCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;cAML;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;cAdS,kCAiDE,IAAI4C,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;gBAC5C,OAAOjD,KAAK,CACToC,MADI,CACG;kBACNT,IAAI,EAAE,IADA;kBAEN1B,KAAK,EAAED,KAFD;kBAGNwB,EAAE,EAAExB,KAAK,CAACkD,OAHJ;kBAINzB,KAAK,EAAEsD,WAJD;kBAKNrD,OAAO,EAAE,CAAC1B,KAAK,CAACkD,OAAP,EAAgB,cAAhB,EAAgC,YAAhC,CALH;kBAMN/C,QAAQ,EAAEiF,iBAAiB,CAACpC,OAAD,EAAUC,MAAV;gBANrB,CADH,EASJQ,IATI,CASC4B,aATD,WAUEL,WAVF,CAAP;cAWD,CAZM,CAjDF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AA+DD;AAED;AACA;AACA;AACA;;AACO,SAASe,aAAT,CAAuBjG,OAAvB,EAAgC;EACrC;IAAA,uEAAO,kBAAgBC,OAAhB;MAAA,qCAWIiG,qBAXJ,EA4BIC,iBA5BJ;;MAAA;QAAA;UAAA;YAAA;cA4BIA,iBA5BJ,iCA4BwB;gBAC3B,OAAOjG,KAAK,CAAC2C,MAAN,CACL7C,OAAO,CAAC2B,KADH,EAELmB,IAAI,CAACc,SAAL,CACE5D,OAAO,CAACiG,aAAR,CAAsB;kBACpBG,UAAU,EAAElG,KAAK,CAACkG,UADE;kBAEpB7B,UAAU,EAAErE,KAAK,CAACkD,OAFE;kBAGpBwC,SAAS,EAAEZ,aAHS;kBAIpBa,SAAS,EAAEZ;gBAJS,CAAtB,CADF,CAFK,CAAP;cAWD,CAxCI;;cAWIiB,qBAXJ,kCAW0BhD,OAX1B,EAWmCC,MAXnC,EAW2C;gBAC9C;kBAAA,uEAAO;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAAkBnC,OAAlB,SAAkBA,OAAlB,EAA2BqB,YAA3B,SAA2BA,YAA3B;4BAAA;4BAEGgB,KAFH,GAEWP,IAAI,CAACC,KAAL,CAAW/B,OAAX,CAFX;4BAGHP,OAAO,CAACa,KAAR,CAAc,mBAAd,EAAmC+B,KAAnC;4BACMyC,OAJH,GAIa9F,OAAO,CAAC+F,UAAR,CAAmBE,aAAa,CAACrF,IAAjC,EAAuCyC,KAAvC,CAJb;4BAAA;4BAAA,OAKmBhD,QAAQ,CAACJ,OAAD,EAAU6F,OAAV,CAL3B;;0BAAA;4BAKGE,OALH;;4BAMH,IAAIA,OAAO,CAACK,cAAR,KAA2B,gBAA/B,EAAiD;8BAC/ChE,YAAY,CAACP,WAAb;8BACAoB,OAAO,CAAC8C,OAAD,CAAP;4BACD;;4BATE;4BAAA;;0BAAA;4BAAA;4BAAA;4BAWHd,WAAW,eAAQ/B,MAAR,EAAgB8C,aAAa,CAACrF,IAA9B,CAAX;;0BAXG;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAAP;;kBAAA;oBAAA;kBAAA;gBAAA;cAcD,CA1BI;;cAEIV,KAFJ,GAIDD,OAJC,CAEHE,KAFG,kCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;cAML;AACJ;AACA;AACA;AACA;;cAVS,kCA0CE,IAAI4C,OAAJ;gBAAA,uEAAY,kBAAgBC,OAAhB,EAAyBC,MAAzB;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,kCACVjD,KAAK,CACToC,MADI,CACG;4BACNT,IAAI,EAAE,KADA;4BAEN1B,KAAK,EAAED,KAFD;4BAGNwB,EAAE,EAAExB,KAAK,CAACkD,OAHJ;4BAINzB,KAAK,EAAEsD,WAJD;4BAKNrD,OAAO,EAAE,CAAC1B,KAAK,CAACkD,OAAP,EAAgB,YAAhB,EAA8B,gBAA9B,CALH;4BAMN/C,QAAQ,EAAE6F,qBAAqB,CAAChD,OAAD,EAAUC,MAAV;0BANzB,CADH,EASJQ,IATI,CASCwC,iBATD,WAUEjB,WAVF,CADU;;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CAAZ;;gBAAA;kBAAA;gBAAA;cAAA,IA1CF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AAwDD;AAED;AACA;AACA;AACA;;AACO,SAASoB,cAAT,CAAwBtG,OAAxB,EAAiC;EACtC;IAAA,uEAAO,kBAAgBC,OAAhB;MAAA,qCAYIsG,sBAZJ,EA0BIC,kBA1BJ;;MAAA;QAAA;UAAA;YAAA;cA0BIA,kBA1BJ,kCA0ByB;gBAC5B,OAAOtG,KAAK,CAAC2C,MAAN,CACL7C,OAAO,CAAC2B,KADH,EAELmB,IAAI,CAACc,SAAL,CACE5D,OAAO,CAACsG,cAAR,CAAuB;kBACrBG,UAAU,EAAEvG,KAAK,CAACuG,UADG;kBAErBlC,UAAU,EAAErE,KAAK,CAACkD,OAFG;kBAGrBwC,SAAS,EAAEZ,aAHU;kBAIrBa,SAAS,EAAEZ;gBAJU,CAAvB,CADF,CAFK,CAAP;cAWD,CAtCI;;cAYIsB,sBAZJ,kCAY2BrD,OAZ3B,EAYoCC,MAZpC,EAY4C;gBAC/C;kBAAA,wEAAO;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAAkBnC,OAAlB,SAAkBA,OAAlB;4BAAA;4BAEGqC,KAFH,GAEWP,IAAI,CAACC,KAAL,CAAW/B,OAAX,CAFX;4BAGHP,OAAO,CAACa,KAAR,CAAc,mBAAd,EAAmC+B,KAAnC;4BACMyC,OAJH,GAIa9F,OAAO,CAAC+F,UAAR,CAAmBO,cAAc,CAAC1F,IAAlC,EAAwCyC,KAAxC,CAJb;4BAAA;4BAAA,OAKmBhD,QAAQ,CAACJ,OAAD,EAAU6F,OAAV,CAL3B;;0BAAA;4BAKGE,OALH;4BAMH9C,OAAO,CAAC8C,OAAD,CAAP;4BANG;4BAAA;;0BAAA;4BAAA;4BAAA;4BAQHd,WAAW,eAAI/B,MAAJ,EAAYoD,sBAAsB,CAAC3F,IAAnC,CAAX;;0BARG;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAAP;;kBAAA;oBAAA;kBAAA;gBAAA;cAWD,CAxBI;;cAEIV,KAFJ,GAIDD,OAJC,CAEHE,KAFG,kCAIDF,OAJC,CAGHG,IAHG,MAGIC,QAHJ;cAML;AACJ;AACA;AACA;AACA;AACA;;cAXS,kCAwCE,IAAI4C,OAAJ;gBAAA,wEAAY,kBAAgBC,OAAhB,EAAyBC,MAAzB;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,kCACVjD,KAAK,CACToC,MADI,CACG;4BACNT,IAAI,EAAE,IADA;4BAEN1B,KAAK,EAAED,KAFD;4BAGNwB,EAAE,EAAExB,KAAK,CAACkD,OAHJ;4BAINzB,KAAK,EAAE,cAJD;4BAKNC,OAAO,EAAE,CAAC1B,KAAK,CAACkD,OAAP,EAAgB,kBAAhB,EAAoC,iBAApC,CALH;4BAMN/C,QAAQ,EAAEkG,sBAAsB,CAACrD,OAAD,EAAUC,MAAV;0BAN1B,CADH,EASJQ,IATI,CASC6C,kBATD,WAUEtB,WAVF,CADU;;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CAAZ;;gBAAA;kBAAA;gBAAA;cAAA,IAxCF;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAP;;IAAA;MAAA;IAAA;EAAA;AAsDD,C;;;;;;;;;;;;;;;;;;;;;ACtPY;;;;+CACb,oJ;;;;;;AACA;AAEA,IAAMwB,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAZ,IAA6B,gBAA7C;AACA,IAAMC,MAAM,GAAG,IAAI3F,MAAJ,CAAWwF,OAAO,CAACC,GAAR,CAAYG,YAAvB,KAAwC,SAAvD;AACA,IAAMC,OAAO,GAAG,CAACL,OAAO,CAACC,GAAR,CAAYK,cAAZ,IAA8B,UAA/B,IAA6CN,OAAO,CAACO,GAArE;AAEA,IAAMC,KAAK,GAAG,IAAIC,0CAAJ,CAAU;EACtBC,QAAQ,EAAE,UADY;EAEtBX,OAAO,EAAEA,OAAO,CAACY,KAAR,CAAc,GAAd;AAFa,CAAV,CAAd;AAKA,IAAMC,QAAQ,GAAGJ,KAAK,CAACI,QAAN,CAAe;EAAEP,OAAO,EAAPA;AAAF,CAAf,CAAjB;AACA,IAAMQ,QAAQ,GAAGL,KAAK,CAACK,QAAN,EAAjB;AAEA;AACA;AACA;;AACO,IAAMjF,KAAK,GAAG;EACnBI,SAAS,EAAE,KADQ;EAEnBmE,MAAM,EAANA,MAFmB;;EAInB;AACF;AACA;AACA;AACA;EACQxE,MATa,kBASNX,KATM,EASCtB,QATD,EASW;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAEpBkH,QAAQ,CAACE,OAAT,EAFoB;;YAAA;cAAA;cAAA,OAGpBF,QAAQ,CAACG,SAAT,CAAmB;gBAAE/F,KAAK,EAALA,KAAF;gBAASgG,aAAa,EAAE;cAAxB,CAAnB,CAHoB;;YAAA;cAI1B,KAAI,CAAChF,SAAL,GAAiB,IAAjB;cAJ0B;cAAA,OAKpB4E,QAAQ,CAACK,GAAT,CAAa;gBACjBC,WAAW;kBAAA,8EAAE;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAASlG,KAAT,QAASA,KAAT,EAAgBX,OAAhB,QAAgBA,OAAhB;;4BACX,IAAI;8BACFX,QAAQ,CAAC;gCACPsB,KAAK,EAALA,KADO;gCAEPX,OAAO,EAAEA,OAAO,CAAC8G,KAAR,CAAcC,QAAd;8BAFF,CAAD,CAAR;4BAID,CALD,CAKE,OAAOrH,KAAP,EAAc;8BACdD,OAAO,CAACC,KAAR,CAAcA,KAAd;4BACD;;0BARU;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAAF;;kBAAA;oBAAA;kBAAA;;kBAAA;gBAAA;cADM,CAAb,CALoB;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAkB1BD,OAAO,CAACC,KAAR;;YAlB0B;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAoB7B,CA7BkB;;EA+BnB;AACF;AACA;AACA;AACA;EACQmC,MApCa,kBAoCNlB,KApCM,EAoCCX,OApCD,EAoCU;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAEnBwG,QAAQ,CAACC,OAAT,EAFmB;;YAAA;cAAA;cAAA,OAGnBD,QAAQ,CAACQ,IAAT,CAAc;gBAClBrG,KAAK,EAAEA,KADW;gBAElBsG,QAAQ,EAAE,CAAC;kBAAEH,KAAK,EAAE9G;gBAAT,CAAD;cAFQ,CAAd,CAHmB;;YAAA;cAAA;cAAA,OAOnBwG,QAAQ,CAACU,UAAT,EAPmB;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cASzBzH,OAAO,CAACC,KAAR,CAAc;gBAAEC,IAAI,EAAE,MAAI,CAACkC,MAAL,CAAYjC,IAApB;gBAA0BF,KAAK;cAA/B,CAAd;;YATyB;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAW5B;AA/CkB,CAAd,C","file":"867.js","sourcesContent":["\"use strict\";\n\n/**\n * @typedef {import('../domain/order').Order} Order\n * @typedef {string} address\n * @callback adapterFactory\n * @param {service} service\n * @returns {function({model:Order})} - verified/corrected address\n */\n\n/**\n *\n * @type {adapterFactory}\n * @param {import(\"../services/address-service\").Address} service\n */\nexport function validateAddress(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    try {\n      const shippingAddress = await service.validateAddress(\n        order.decrypt().shippingAddress\n      );\n      const update = await callback(options, { shippingAddress });\n      return update;\n    } catch (error) {\n      console.error({ func: validateAddress.name, error, options });\n    }\n  };\n}\n","\"use strict\";\n\n/**\n * @typedef {import('../domain').Model} Model\n * @typedef {string} serviceName\n *\n * @typedef {Object} EventMessage\n * @property {serviceName} eventSource\n * @property {serviceName|\"broadcast\"} eventTarget\n * @property {\"command\"|\"commandResponse\"|\"notification\"|\"import\"} eventType\n * @property {string} eventName\n * @property {string} eventTime\n * @property {string} eventUuid\n * @property {NotificationEvent|ImportEvent|CommandEvent} eventData\n *\n * @typedef {object} ImportEvent\n * @property {\"service\"|\"model\"|\"adapter\"} type\n * @property {string} url\n * @property {string} path\n * @property {string} importRemote\n *\n * @typedef {object} NotificationEvent\n * @property {string|} message\n * @property {\"utf8\"|Uint32Array} encoding\n *\n * @typedef {Object} CommandEvent\n * @property {string} commandName\n * @property {string} commandResp\n * @property {*} commandArgs\n */\n\n/**\n * @typedef {{\n *  filter:function(message):Promise<void>,\n *  unsubscribe:function()\n * }} Subscription\n * @typedef {string|RegExp} topic\n * @callback eventHandler\n * @param {string} eventData\n * @typedef {eventHandler} notifyType\n * @typedef {{\n * listen:function(topic, x),\n * notify:notifyType\n * }} EventService\n * @callback adapterFactory\n * @param {EventService} service\n * @returns {function(topic, eventHandler)}\n */\nimport { Event } from \"../services/event-service\";\n\n/**\n * @type {Map<any,Map<string,*>>}\n */\nconst subscriptions = new Map();\n\n/**\n * Test the filter.\n * @param {string} message\n * @returns {function(string|RegExp):boolean} did the filter match?\n */\nfunction filterMatches(message) {\n  return function (filter) {\n    const regex = new RegExp(filter);\n    const result = regex.test(message);\n    if (result)\n      console.debug({\n        func: filterMatches.name,\n        filter,\n        result,\n        message: message.substring(0, 100).concat(\"...\"),\n      });\n    return result;\n  };\n}\n\n/**\n * @typedef {string} message\n * @typedef {string|RegExp} topic\n * @param {{\n *  id:string,\n *  callback:function(message,Subscription),\n *  topic:topic,\n *  filter:string|RegExp,\n *  once:boolean,\n *  model:import(\"../domain\").Model\n * }} options\n */\nconst Subscription = function ({ id, callback, topic, filters, once, model }) {\n  return {\n    /**\n     * unsubscribe from topic\n     */\n    unsubscribe() {\n      subscriptions.get(topic).delete(id);\n    },\n\n    getId() {\n      return id;\n    },\n\n    getModel() {\n      return model;\n    },\n\n    getSubscriptions() {\n      return [...subscriptions.entries()];\n    },\n\n    /**\n     * Filter message and invoke callback\n     * @param {string} message\n     */\n    async filter(message) {\n      if (filters) {\n        // Every filter must match.\n        if (filters.every(filterMatches(message))) {\n          if (once) {\n            // Only looking for 1 msg, got it.\n            this.unsubscribe();\n          }\n          await callback({ message, subscription: this });\n          return;\n        }\n        // no match\n        return;\n      }\n      // no filters defined, just invoke the callback.\n      await callback({ message, subscription: this });\n    },\n  };\n};\n\n/**\n * Listen for external events with default event service if none specified.\n * @type {adapterFactory}\n * @param {import('../services/event-service').Event} [service] - has default service\n */\nexport function listen(service = Event) {\n  return async function (options) {\n    const {\n      model,\n      args: [arg],\n    } = options;\n\n    const subscription = Subscription({ model, ...arg });\n\n    if (subscriptions.has(arg.topic)) {\n      subscriptions.get(arg.topic).set(arg.id, subscription);\n      return subscription;\n    }\n\n    subscriptions.set(arg.topic, new Map().set(arg.id, subscription));\n\n    if (!service.listening) {\n      service.listen(/Channel/, async function ({ topic, message }) {\n        if (subscriptions.has(topic)) {\n          subscriptions.get(topic).forEach(async subscription => {\n            await subscription.filter(message);\n          });\n        }\n      });\n    }\n    return subscription;\n  };\n}\n\n/**\n * @type {adapterFactory}\n * @returns {function(topic, eventData)}\n */\nexport function notify(service = Event) {\n  return async function ({ model, args: [topic, message] }) {\n    console.debug(\"sending...\", { topic, message: JSON.parse(message) });\n    await service.notify(topic, message);\n    return model;\n  };\n}\n","\"use strict\";\n\nexport * from \"./address-adapter\";\nexport * from \"./payment-adapter\";\nexport * from \"./shipping-adapter\";\nexport * from \"./event-adapter\";\nexport * from \"./inventory-adapter\";\n\n/**\n * @typedef {import('../domain').Model} Model\n * @typedef {function(function(eventCallback):Promise<Model>)} adapterFunction\n */\n","\"use strict\";\n\n/**\n * @typedef {string|RegExp} topic\n * @callback eventCallback\n * @param {string} message\n * @param {{\n *  getModel:function():object,\n *  unsubscribe:function()\n * }} subscription\n * @typedef {eventCallback} shipOrderType\n * @param topic,\n * @param eventCallback\n * @typedef {{\n *  shipOrder:shipOrderType,\n *  trackShipment:function(),\n *  verifyDelivery:function()\n * }} InventoryAdapter\n * @typedef {import('../domain/order').Order} Order\n * @typedef {InventoryAdapter} service \n * @typedef {{\n *  listen:function(topic,RegExp,eventCallback)\n *  notify:function(topic,eventCallback)\n * }} event\n * @callback adapterFactory\n * @param {service} service\n * @param {event} event\n * @returns {function({\n * model:Order,\n * resolve:function()\n * ,args:[\n * eventCallback, \n * options:{}]\n * })}\n   \n }]})} \n *\n */\n\n/**\n * @type {adapterFactory}\n */\nexport function pickOrder(service) {\n  return function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    return new Promise(function (resolve, reject) {\n      // start listening first then send the event\n      return order\n        .listen({\n          once: true,\n          model: order,\n          id: order.orderNo,\n          topic: \"orderChannel\",\n          filters: [order.orderNo, \"orderPicked\", \"warehouse_addr\"],\n          callback: async ({ message }) => {\n            try {\n              const event = JSON.parse(message);\n              console.log(\"recieved event: \", event);\n              const pickupAddress = event.eventData.warehouse_addr;\n              const newOrder = await callback(options, { pickupAddress });\n              resolve(newOrder); // hold promise until we get an answer\n            } catch (error) {\n              reject(error);\n            }\n          },\n        })\n        .then(() => {\n          return order.notify(\n            \"inventoryChannel\",\n            JSON.stringify({\n              eventType: \"Command\",\n              eventTime: new Date().toUTCString(),\n              eventSource: \"orderService\",\n              eventData: {\n                replyChannel: \"orderChannel\",\n                commandName: \"pickOrder\",\n                commandArgs: {\n                  lineItems: order.orderItems,\n                  externalId: order.orderNo,\n                },\n              },\n            })\n          );\n        })\n        .catch((reason) => {\n          throw new Error(reason);\n        });\n    });\n  };\n}\n","'use strict'\n\n/**\n * @typedef {import('../domain/order').Order} Order\n * @callback adapterFactory\n * @param {service} service\n * @returns {function({model:Order,parms:any[]})}\n */\n\n/**\n * @type {adapterFactory}\n * @param {import(\"../services/payment-service\").PaymentService} service\n */\nexport function authorizePayment (service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback]\n    } = options\n\n    const paymentAuthorization = await service.authorizePayment(\n      order.orderNo,\n      12.0,\n      'src',\n      'ibm',\n      false\n    )\n    const paymentStatus = 'APPROVED'\n    return callback(options, { paymentStatus })\n  }\n}\n\n/**\n * @type {adapterFactory}\n */\nexport function completePayment (service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback]\n    } = options\n    const confirmationCode = await service.completePayment(order)\n    const newOrder = await callback(options, { confirmationCode })\n    return newOrder\n  }\n}\n/**\n * @type {adapterFactory}\n */\nexport function refundPayment (service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback]\n    } = options\n    await service.refundPayment(order)\n    const newOrder = await callback(options)\n    return newOrder\n  }\n}\n","\"use strict\";\n\n/**\n * @callback portCallback\n * @param {{options:{}}}\n * @param {{payload:{[key]:string}}}\n */\n\n/**\n * @typedef {string} message\n * @callback eventCallback\n * @param {string} message\n * @param {{\n *  unsubscribe:function(),\n *  filter:function(message):boolean\n * }} subscription\n */\n\n/**\n * @typedef {import('../domain/order').Order} Order\n */\n\n/**\n * @typedef {import(\"../services/shipping-service\").shippingService} shippingService\n */\n\n/**\n * @typedef {{\n *  listen:function(topic,RegExp,portCallback)\n *  notify:function(topic,eventCallback)\n * }} event\n */\n\n/**\n * @callback adapterFactory\n * @param {service} service\n * @returns {function({model:Order,args:[portCallback]}):Order}\n */\n\nconst ORDER_SERVICE = \"orderService\";\nconst ORDER_TOPIC = \"orderChannel\";\n\nconst handleError = (error, reject = null, func = null) => {\n  console.error({ file: __filename, func, error });\n  if (reject) reject(error);\n};\n\n/**\n * Call `shipOrder` to request shipment of the order items.\n * @param {import('../services/shipping-service').shippingService} service\n * @type {adapterFactory}\n * @returns {function(options):Promise<Order>}\n * Return a promise that is resolved once we receive\n * a response message from the shipping service. Start\n * listening for the response first and then send the\n * request message.\n *\n */\nexport function shipOrder(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    /**\n     * Called by the event listener when the shipOrder\n     * response message arrives. Resolve the promise\n     * the caller has been waiting on since we sent\n     * the request message.\n     * @param {function(Order)} resolve\n     * @param {function(Error)} reject\n     * @returns {function(message):Promise<Order>}\n     */\n    function shipOrderCallback(resolve, reject) {\n      return async function ({ message }) {\n        try {\n          const event = JSON.parse(message);\n          console.debug(\"received event... \", event);\n          const payload = service.getPayload(shipOrder.name, event);\n          const updated = await callback(options, payload);\n          resolve(updated);\n        } catch (error) {\n          handleError(error, reject, shipOrderCallback.name);\n        }\n      };\n    }\n\n    /**\n     * Send the shipOrder event to the shipping service.\n     */\n    function callShipOrder() {\n      return order.notify(\n        service.topic,\n        JSON.stringify(\n          service.shipOrder({\n            shipTo: order.decrypt().shippingAddress,\n            shipFrom: order.pickupAddress,\n            lineItems: order.orderItems,\n            signature: order.signatureRequired,\n            externalId: order.orderNo,\n            requester: ORDER_SERVICE,\n            respondOn: ORDER_TOPIC,\n          })\n        )\n      );\n    }\n\n    return new Promise(function (resolve, reject) {\n      return order\n        .listen({\n          once: true,\n          model: order,\n          id: order.orderNo,\n          topic: ORDER_TOPIC,\n          filters: [order.orderNo, \"orderShipped\", \"shipmentId\"],\n          callback: shipOrderCallback(resolve, reject),\n        })\n        .then(callShipOrder)\n        .catch(handleError);\n    });\n  };\n}\n\n/**\n * @param {import('../services/shipping-service').shippingService} service\n * @type {adapterFactory}\n */\nexport function trackShipment(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    /**\n     *\n     * @param {function(Order)} resolve resolve the promise\n     * @param {function(Error)} reject reject promise\n     */\n    function trackShipmentCallback(resolve, reject) {\n      return async function ({ message, subscription }) {\n        try {\n          const event = JSON.parse(message);\n          console.debug(\"received event...\", event);\n          const payload = service.getPayload(trackShipment.name, event);\n          const updated = await callback(options, payload);\n          if (updated.trackingStatus === \"orderDelivered\") {\n            subscription.unsubscribe();\n            resolve(updated);\n          }\n        } catch (error) {\n          handleError(error, reject, trackShipment.name);\n        }\n      };\n    }\n\n    function callTrackShipment() {\n      return order.notify(\n        service.topic,\n        JSON.stringify(\n          service.trackShipment({\n            shipmentId: order.shipmentId,\n            externalId: order.orderNo,\n            requester: ORDER_SERVICE,\n            respondOn: ORDER_TOPIC,\n          })\n        )\n      );\n    }\n\n    return new Promise(async function (resolve, reject) {\n      return order\n        .listen({\n          once: false,\n          model: order,\n          id: order.orderNo,\n          topic: ORDER_TOPIC,\n          filters: [order.orderNo, \"trackingId\", \"trackingStatus\"],\n          callback: trackShipmentCallback(resolve, reject),\n        })\n        .then(callTrackShipment)\n        .catch(handleError);\n    });\n  };\n}\n\n/**\n * @param {import('../services/shipping-service').shippingService} service\n * @type {adapterFactory}\n */\nexport function verifyDelivery(service) {\n  return async function (options) {\n    const {\n      model: order,\n      args: [callback],\n    } = options;\n\n    /**\n     *\n     * @param {function(Order)} resolve\n     * @param {function(Error)} reject\n     * @returns\n     */\n    function verifyDeliveryCallback(resolve, reject) {\n      return async function ({ message }) {\n        try {\n          const event = JSON.parse(message);\n          console.debug(\"received event...\", event);\n          const payload = service.getPayload(verifyDelivery.name, event);\n          const updated = await callback(options, payload);\n          resolve(updated);\n        } catch (e) {\n          handleError(e, reject, verifyDeliveryCallback.name);\n        }\n      };\n    }\n\n    function callVerifyDelivery() {\n      return order.notify(\n        service.topic,\n        JSON.stringify(\n          service.verifyDelivery({\n            trackingId: order.trackingId,\n            externalId: order.orderNo,\n            requester: ORDER_SERVICE,\n            respondOn: ORDER_TOPIC,\n          })\n        )\n      );\n    }\n\n    return new Promise(async function (resolve, reject) {\n      return order\n        .listen({\n          once: true,\n          model: order,\n          id: order.orderNo,\n          topic: \"orderChannel\",\n          filters: [order.orderNo, \"deliveryVerified\", \"proofOfDelivery\"],\n          callback: verifyDeliveryCallback(resolve, reject),\n        })\n        .then(callVerifyDelivery)\n        .catch(handleError);\n    });\n  };\n}\n","\"use strict\";\n\nimport { Kafka } from \"kafkajs\";\n\nconst brokers = process.env.KAFKA_BROKERS || \"localhost:9092\";\nconst topics = new RegExp(process.env.KAFKA_TOPICS) || /Channel/;\nconst groupId = (process.env.KAFKA_GROUP_ID || \"MicroLib\") + process.pid;\n\nconst kafka = new Kafka({\n  clientId: \"MicroLib\",\n  brokers: brokers.split(\",\"),\n});\n\nconst consumer = kafka.consumer({ groupId });\nconst producer = kafka.producer();\n\n/**\n * @typedef {EventService}\n */\nexport const Event = {\n  listening: false,\n  topics,\n\n  /**\n   * Implements event consumer service.\n   * @param {string|RegExp} topic\n   * @param {function({message, topic})} callback\n   */\n  async listen(topic, callback) {\n    try {\n      await consumer.connect();\n      await consumer.subscribe({ topic, fromBeginning: true });\n      this.listening = true;\n      await consumer.run({\n        eachMessage: async ({ topic, message }) => {\n          try {\n            callback({\n              topic,\n              message: message.value.toString(),\n            });\n          } catch (error) {\n            console.error(error);\n          }\n        },\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  },\n\n  /**\n   * Implemements event producer service.\n   * @param {string|RegExp} topic\n   * @param {string} message\n   */\n  async notify(topic, message) {\n    try {\n      await producer.connect();\n      await producer.send({\n        topic: topic,\n        messages: [{ value: message }],\n      });\n      await producer.disconnect();\n    } catch (error) {\n      console.error({ func: this.notify.name, error });\n    }\n  },\n};\n"],"sourceRoot":""}